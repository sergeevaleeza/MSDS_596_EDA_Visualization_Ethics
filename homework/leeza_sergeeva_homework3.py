# -*- coding: utf-8 -*-
"""leeza_sergeeva_homework3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZesjAyPQWMqAMimkOHbzPztIa9Dg8hyy

# Homework 3 (100 points)
## Due: Tuesday, Sept 21 @ 6:30 PM 

**The very first thing you should do is save your own copy of this Homework by clicking on File -> "Save a copy in Drive"**

This homework is divided into 2 sections which each perform different tasks on the initial data provided.  Read the data description below carefully to understand the data, then work on each section.

When you complete this assignment, **please submit 1 file and 1 link via Canvas before the deadline.**

1.   Your Jupyter Notebook code as a .ipynb file (File -> "Download .ipynb")
2.   As a comment on your .ipynb submission please include a link to your Google CoLab Jupyter notebook. Click the "Share" button in the top right.  Ensure that anyone with the link has at least "Commenter" access. **Once you submit your HW on Canvas, please do not make any more edits to the Jupyter notebook until after your HW is graded**

Please use the naming convention:  

**firstname_lastname_homework3.ipynb**

**Until both steps 1 and 2 have been completed, your assignment is considered INCOMPLETE and you will receive -10% per day late until the assignment is completed.**

## Data Description

The dataset used for this homework is a historical dataset on the modern Olympic Games, including all the Games from Athens 1896 to Rio 2016.

**Each row corresponds to an individual athlete competing in an individual Olympic event (athlete-events).**

Kaggle page for data: https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results

You can find the file in Canvas as `athlete_events.csv`

## Section 1: What does peak performance look like?
**Total 30 points**

Olympians are world-class athletes, but peak performance body types and ages can differ drastically depending on the sport/event.  Let's analyze this by specifically looking at those athletes that **won medals** as a proxy for peak performance.

### Part 1: Data Prep

**10 points**

Using the original dataframe loaded from the CSV, create a new dataframe `medalists` with the following characteristics


*   Data is filtered to only the rows that have `"Gold", "Silver", or "Bronze"` in `Medals`.
*   Any rows that have NA or NaN are dropped using `dropna()`. 

*Note: With the steps above, your new dataframe `medalists` should have 30,181 rows*
"""

from google.colab import drive
drive.mount('/content/drive')

# Write your code below
# Write code to load data below
import pandas as pd
import numpy as np

athlete_events_df = pd.read_csv('/content/drive/MyDrive/2021_Fall_USF_PMS_Biotechnology/MSDS_596/data/athlete_events.csv', index_col='ID')

# Any rows that have NA or NaN are dropped using dropna()
medalists = athlete_events_df.dropna()
medalists.count(axis=0)

# Data is filtered to only the rows that have "Gold", "Silver", or "Bronze" in Medals.
medalists = medalists[medalists["Medal"].isin(["Gold", "Silver", "Bronze"])]
medalists.head(5)

"""### Part 2: Heights and Weights by Event
**5 points each (total 20 points)**

Using `medalists`, answer the below questions by aggregating the column of interest by `Event` and sorting the result values.


1.   Which **Event** has the **smallest** average **height** for **female medalists**? What is it?
2.   Which **Event** has the **highest** average **age** for **female medalists**? What is it?
3.   Which **Event** has the **highest** average **weight** for **male medalists**? What is it?
4.   Which **Event** has the **highest** average **height** for **male medalists**? What is it?

Note: You can use `.reset_index(inplace=True)` on your dataframe to convert all multi-indexes to normal columns, which are easier to work with.  


"""

# Write your code and answers below
# 1. Which Event has the smallest average height for female medalists? What is it?
medalists_female = medalists[medalists["Sex"].isin(["F"])] # only female atheltes
medalists_female_event = medalists_female.groupby(by=['Event']).agg(['mean'])

min_f_height = medalists_female_event["Height"].min() # 149.866667
print("Minimum average height of the female athletes is:", float(min_f_height))
event_f_min_height = medalists_female_event[['Height']].idxmin()
print("Event with lowerst female height average is:", event_f_min_height[0],"\n")

# 2. Which Event has the highest average age for female medalists? What is it?
max_f_age = medalists_female_event["Age"].max() # 35.1875
print("Maximum average age of the female athletes is:", float(max_f_age))
event_f_max_age = medalists_female_event[['Age']].idxmax()
print("Event with highest female age average is:", event_f_max_age[0],"\n")

# 3. Which Event has the highest average weight for male medalists? What is it?
medalists_male = medalists[medalists["Sex"].isin(["M"])] # only male atheltes
medalists_male_event = medalists_male.groupby(by=['Event']).agg(['mean'])

max_m_weight = medalists_male_event["Weight"].max() # 139.542857
print("Maximum average weight of the male athletes is:", float(max_m_weight))
event_m_max_weight = medalists_male_event[['Weight']].idxmax()
print("Event with highest male weight average is:", event_m_max_weight[0],"\n")

# 4. Which Event has the highest average height for male medalists? What is it?
max_m_height = medalists_male_event["Height"].max() # 197.996721
print("Maximum average weight of the male athletes is:", float(max_m_height))
event_m_max_height = medalists_male_event[['Height']].idxmax()
print("Event with highest male height average is:", event_m_max_height[0],"\n")

"""### Challenge (Not required for points)

Use `seaborn` to plot how these biometrics have changed over the past 100 years in various sports (see last part of lecture).  In other words, create a visual that shows, for example, how the average height has changed for a given Olympic Event (like Gymnastics) over time.
"""

# Challenge code
import seaborn as sns
# how the average height has changed for a given Olympic Event over time.
athlete_events_gymnastics = athlete_events_df.dropna()
athlete_events_gymnastics = athlete_events_gymnastics[athlete_events_gymnastics["Sport"].isin(["Gymnastics"])]
athlete_events_gymnastics_avg_year = athlete_events_gymnastics.groupby(by=['Year']).agg("mean")

sns.lineplot(data=athlete_events_gymnastics_avg_year, 
             x="Year", 
             y="Height")

"""## Section 2: Winter vs Summer
**70 points total**

Let's try to answer the question:

*Which countries perform better in the Winter Olympics as compared to the Summer Olympics?*

To do this, we will take the following general steps:


*   Create a metric to evaluate Olympic performance
*   Calculate that metric for every country and season (Summer/Winter)
*   For a given country, compare the relative contribution to the metric from the Summer Olympics vs the Winter Olympics
*   Rank them by highest relative performance in the Winter Olympics

### Part 1: Filter Data and Fill NA
**5 point each (total 10 points)**

1.   The Winter Olympics have only been around since 1924 while the Summer Olympics started in 1896.  Let's filter this dataframe to `Year >= 1924` so that we have an even playing field within which to compare Winter performance to Summer performance.
2.   The `Medal` column contains many `NaN` values.  Use `fillna` to substitute these values with `"None"` (i.e. the string "None") instead.
"""

# Write code below
# 1. filter this dataframe to Year >= 1924
athlete_events_after_1924 = athlete_events_df[athlete_events_df["Year"] >= 1924]
# 2. fill Na values in Medal column
athlete_events_after_1924 = athlete_events_after_1924.fillna(value="None")
athlete_events_after_1924.head(5)

"""### Part 2: Calculate Weighted Medal Points
**5 points for the function, 5 points for the transformation, 5 points for adding the column (15 points total)**

When evaluating country performance in the Olympics, we don't want to count Gold medals as equivalent to Silver/Bronze medals.  Let's assign "Medal Points" to each tier of Olympic medal as follows:

*   Gold:  3 points
*   Silver: 2 points
*   Bronze: 1 point
*   No medal: 0 points

Write a function `medal_to_points` to transform and create a new column called `MedalPoints`.  `medal_to_points` will accept a string (possible values are `"Gold"`, `"Silver"`, `"Bronze"`, `"None"`) and returns the appropriate number of points as an integer.

Then add a new column `MedalPoints` to your dataframe using `transform` and the newly defined function `medal_to_points`
"""

# Define medal_to_points below
# Function to add new column based on the values in the Medal column
def medal_to_points(medal_name):
    # Insert logic to convert medal to point value
    medal_name.loc[medal_name.Medal == 'Gold', 'MedalPoints'] = 3
    medal_name.loc[medal_name.Medal == 'Gold', 'MedalPoints'] = 3
    medal_name.loc[medal_name.Medal == 'Silver', 'MedalPoints'] = 2
    medal_name.loc[medal_name.Medal == 'Bronze', 'MedalPoints'] = 1
    medal_name.loc[medal_name.Medal == 'None', 'MedalPoints'] = 0
    # Return the converted point value
    return medal_name

athlete_events_after_1924_points = medal_to_points(athlete_events_after_1924)

# Write code to add new column MedalPoints to your dataframe
# This was performed with the function
athlete_events_after_1924_points.head(5)

"""### Part 3: Aggregate MedalPoints
**15 points**

We need to figure out how each country (NOC) performed in the Summer, and how each country performed in the winter.  Now that we have created the performance metric `MedalPoints`, we need to aggregate to figure out how many `MedalPoints` each country earned in each season (Summer and Winter).

1.   Using `NOC` for country and `Season` for season, determine the total number of `MedalPoints` that each country earned in each season (Summer vs Winter)
2.   Store the results of the above in a new dataframe


"""

# Write your code below
country_season_points = athlete_events_after_1924_points.groupby(by=['NOC','Season'], as_index=False)['MedalPoints'].sum()
country_season_points = country_season_points.sort_values(by="MedalPoints", ascending=False)
country_season_points.head(10)

"""### Part 4: Calculate the % of Medal Pts earned in each Season for each Country
**15 points**

To determine which countries perform better in Winter as compared to Summer, let's rank them by the % of Medal Points earned in the Winter.  In order to do this, we need to calculate a % of total medal points earned by season (Summer vs Winter).

Using a function (can be a lambda function), create a new column `PctWinterMedalPoints` in the data frame by transforming `Medal Points`. **Note: if stuck here, see lecture and lecture notes where we did a similar transformation** 
 


"""

# Write your code below
country_season_points['PctWinterMedalPoints'] = country_season_points.groupby(by=['Season'])['MedalPoints'].transform(lambda x: x*100/x.sum())
country_season_points.head(5)

"""### Part 5: Report Results
**15 points**

For countries **earning at least 100 MedalPoints in the Winter Olympics**, list the top 3 countries that earned the highest % of their Medal Points in the Winter Olympics.  Also list the percentage of Medal Points earned and total number of Medal Points earned in the Winter Olympics.
"""

# Write your code below
country_season_points_100_plus = country_season_points[country_season_points['MedalPoints'] > 100]  
country_season_points_100_plus_winter = country_season_points_100_plus[country_season_points_100_plus.Season == 'Winter']
country_season_points_100_plus_winter.head(3)