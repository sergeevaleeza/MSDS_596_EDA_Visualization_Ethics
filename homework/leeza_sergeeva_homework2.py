# -*- coding: utf-8 -*-
"""leeza_sergeeva_homework2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15CabVVH8g_fsGLBbEsdpwItk9SlupHbG

# Homework 2 (100 points)
## Due: Tuesday, Sept 14 @ 6:30 PM 

**The very first thing you should do is save your own copy of this Homework by clicking on File -> "Save a copy in Drive"**

This homework is divided into 4 sections which all perform different tasks on the initial data provided.  Read the data description below carefully to understand the data, then work on each section.

When you complete this assignment, **please submit 1 file and 1 link via Canvas before the deadline.**


1.   Your Jupyter Notebook code as a .py file (File -> "Download .py")
2.   As a comment on your .py submission please include a link to your Google CoLab Jupyter notebook. Click the "Share" button in the top right.  Ensure that anyone with the link has at least "Commenter" access. **Once you submit your HW on Canvas, please do not make any more edits to the Jupyter notebook until after your HW is graded**

Please use the naming convention:  

**firstname_lastname_homework2.py**
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Data Description

This dataset consists of tv shows and movies available on Netflix as of 2019. The dataset is collected from Flixable which is a third-party Netflix search engine.

See Kaggle page for more info: https://www.kaggle.com/shivamb/netflix-shows

The data is available in the Canvas Module for **pandas** under the name `netflix_titles.csv`

Load this data into `pandas` and use `index_col='show_id'`

"""

# Write code to load data below
import pandas as pd
import numpy as np

netflix_titles = pd.read_csv('/content/drive/MyDrive/2021_Fall_USF_PMS_Biotechnology/MSDS_596/data/netflix_titles.csv', index_col='show_id')

"""## Section 1: Dataset Overview
**2.5 points each (total 10 points)**

Let's get an initial understanding of the data we are working with. Provide answers and code below.

1.  How many rows and columns are in this dataset?
2.  Provide a list of the column names
3.  Print the **first 10 rows** of this dataset
4.  Use `.info()` to understand where there may be null values in the data
"""

# Write code below
# How many rows and columns are in this dataset?
netflix_titles.shape # (rows, columns) -> (6234, 11)

# Provide a list of the column names
netflix_columns_list = list(netflix_titles.columns)
netflix_columns_list
# ['type', 'title', 'director', 'cast', 'country', 'date_added', 'release_year',
# 'rating', 'duration', 'listed_in', 'description']

# Print the first 10 rows of this dataset
netflix_titles.head(10)

# Use .info() to understand where there may be null values in the data
netflix_titles.info()
# null values in columns director, cast, country and rating

"""## Section 2:  Data Cleaning
**5 points each (total 10 points)**

Let's take some steps to improve the data set for analysis purposes.


1.   There are NA/NaN values in `director`, `cast`, and `country`.  Let's replace these with the value `"Unknown"` using `fillna`
2.   Create a new column `is_produced_in_usa` which is True if `country` contains the word `United States` and False otherwise.  (Hint: Sometimes `country` contains multiple countries separated by commas.  We want to be able to catch `United States` even if it's in this list with other countries also.

***Challenge (not required for points)*** 
Make a new column called `duration_bucket`.  This column will bucket the values found in `duration`, similar to how we grouped values in HW1.  Examples of buckets might be `61-90 minutes`, `91-120 minutes`, `120+ minutes`, or `3+ seasons`.  To do this, I recommend creating a function that converts the value in `duration` to the `bucket_name`, then using the `pandas` `.apply()` function to the `duration` column to create a transformed column, which you can then insert into the dataframe.

Reference: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html
"""

# 1
netflix_titles.director.fillna("Unknown", inplace=True)
netflix_titles.cast.fillna("Unknown", inplace=True)
netflix_titles.country.fillna("Unknown", inplace=True)
netflix_titles.rating.fillna("Unknown", inplace=True)
netflix_titles.date_added.fillna("Unknown", inplace=True)

netflix_titles.info()

# 2
netflix_titles['is_produced_in_usa'] = netflix_titles.country.str.contains('United States')
netflix_titles.head()

"""## Section 3: Data Questions
**10 points each (50 points total)**

Explore the data set to answer the questions below.  In addition to providing the answer, please provide the code you used to answer each question.

1.   What % of Netflix content is produced in the USA?  You can calculate the numerator and denominator separately.  (Hint: Use the new column you created in Section 1)
2.   List all the **movies** directed by **M. Night Shyamalan** that are available on Netflix.
3.   Which **TV Shows produced in Japan** that were released in **2006** are available on Netflix?
4.   How many **movies** and how many **TV shows** (reported separately) did Netflix add in the **month of July 2019**?
5.   List the Netflix content (movies/TV shows) about the FBI (`description` contains "FBI") chronologically by release year (most recent first)

***Challenge (not required for points)*** 

What % of content on Netflix is added in the same year as it is released? Does this differ by movie vs TV show?



"""

# Write code below
# 1. What % of Netflix content is produced in the USA? 
# You can calculate the numerator and denominator separately. 
made_in_usa = sum(netflix_titles['is_produced_in_usa'])
total_movies = len(netflix_titles['is_produced_in_usa'])

(made_in_usa / total_movies) * 100

# 41.86717998075073

# 2. List all the movies directed by M. Night Shyamalan that are available on Netflix.
directed_by_Shyamalan = netflix_titles.director == "M. Night Shyamalan"
netflix_titles[directed_by_Shyamalan]

# 3. Which TV Shows produced in Japan that were released in 2006 are available on Netflix?
made_in_Japan = netflix_titles['country'] == "Japan"
released_in_2006 = netflix_titles['release_year'] == 2006

netflix_titles[made_in_Japan & released_in_2006]
# there is some sort of problem where initialy this doesn't select 
# the right year and doesn't display anything, weirdly I can fix it by 
# replacing  == "2006" to = and run again getting error,
# then placing == again and running it. Really weird, not sure what's going on..

# 4. How many movies and how many TV shows (reported separately)
# did Netflix add in the month of July 2019?
movies = netflix_titles['type'] == "Movie"
tv_show = netflix_titles['type'] == "TV Show"

#netflix_titles = netflix_titles.date_added.str.split(columns = ['month_added','day_added', 'year_added']))
added_in_july = netflix_titles.date_added.str.contains("July")
added_in_2019 = netflix_titles.date_added.str.contains("2019")
# if I need to add column with the values 
# netflix_titles["added_in_july"] = added_in_july
# netflix_titles["added_in_2019"] = added_in_2019

movies_added_in_July_2019 = netflix_titles[movies & 
                                           added_in_july & 
                                           added_in_2019]
movies_added_in_July_2019

# 4 Tv-shows in July 2019
tv_show_added_in_July_2019 = netflix_titles[tv_show & 
                                           added_in_july & 
                                           added_in_2019]
tv_show_added_in_July_2019

# 5 List the Netflix content (movies/TV shows) about the FBI 
# (description contains "FBI") chronologically by release year 
#(most recent first)

fbi_content = netflix_titles.description.str.contains("FBI")
netflix_titles[fbi_content].sort_values(by='release_year', ascending=True)

netflix_titles.release_year.unique()

"""## Section 4: Exploration
**10 points each (30 points total)**

Now choose **3** of your own questions/hypotheses that you would like to explore in this data set.  

Write down your questions/hypotheses as well as your findings and code.  Questions should be of reasonable complexity (either involving data transformations like creating new columns, multiple conditions, or aggregations like `value_counts`).
"""

# Write code below
# 1. What is the longest running tv show on Netflix and how many seasons it has?
netflix_titles[tv_show].duration.unique()
# from the array list i can see that 15 seasons in the longest show
# search tv shows where duration is 15 seasons
fifteen_seasons = netflix_titles.duration.str.contains('15 Seasons')
netflix_titles[tv_show & fifteen_seasons]

# 2. How many shows are there that have 1 season, 2 seasnons, ... 15 seasons?
list_of_seasons_arr = netflix_titles[tv_show].duration.unique()
netflix_titles[tv_show].duration.value_counts()

# 3. How long is the longeset movie on Netflix and what is it's title?
# Find the longest duration of the movie
list_of_movie_lengths_arr = netflix_titles[movies].duration.unique()
netflix_titles[movies].duration.value_counts().tail(50)
# 312 min

# What is the longeset movie on Netflix?
longest_movie = netflix_titles.duration.str.contains('312 min')
netflix_titles[movies & longest_movie]