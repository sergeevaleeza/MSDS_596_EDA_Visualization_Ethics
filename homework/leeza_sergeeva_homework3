{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"leeza_sergeeva_homework3","provenance":[{"file_id":"1Vbgkbg2GCnN6snoEUnFoS4sXJQw7JQyk","timestamp":1632189390494},{"file_id":"1j1E0ojF3aGiCEiiK_DPoyGHYKFdgL5xg","timestamp":1599530544994},{"file_id":"1AHefzMoPFoFNoCp4lHjZwckbfKoff14Y","timestamp":1599263957934}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"sbV99ABnXX5N"},"source":["# Homework 3 (100 points)\n","## Due: Tuesday, Sept 21 @ 6:30 PM \n","\n","**The very first thing you should do is save your own copy of this Homework by clicking on File -> \"Save a copy in Drive\"**\n","\n","This homework is divided into 2 sections which each perform different tasks on the initial data provided.  Read the data description below carefully to understand the data, then work on each section.\n","\n","When you complete this assignment, **please submit 1 file and 1 link via Canvas before the deadline.**\n","\n","1.   Your Jupyter Notebook code as a .ipynb file (File -> \"Download .ipynb\")\n","2.   As a comment on your .ipynb submission please include a link to your Google CoLab Jupyter notebook. Click the \"Share\" button in the top right.  Ensure that anyone with the link has at least \"Commenter\" access. **Once you submit your HW on Canvas, please do not make any more edits to the Jupyter notebook until after your HW is graded**\n","\n","Please use the naming convention:  \n","\n","**firstname_lastname_homework3.ipynb**\n","\n","**Until both steps 1 and 2 have been completed, your assignment is considered INCOMPLETE and you will receive -10% per day late until the assignment is completed.**\n"]},{"cell_type":"markdown","metadata":{"id":"XBto1iw5XphZ"},"source":["## Data Description\n","\n","The dataset used for this homework is a historical dataset on the modern Olympic Games, including all the Games from Athens 1896 to Rio 2016.\n","\n","**Each row corresponds to an individual athlete competing in an individual Olympic event (athlete-events).**\n","\n","Kaggle page for data: https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results\n","\n","You can find the file in Canvas as `athlete_events.csv`\n"]},{"cell_type":"markdown","metadata":{"id":"c3ljYDsLWAN4"},"source":["## Section 1: What does peak performance look like?\n","**Total 30 points**\n","\n","Olympians are world-class athletes, but peak performance body types and ages can differ drastically depending on the sport/event.  Let's analyze this by specifically looking at those athletes that **won medals** as a proxy for peak performance.\n"]},{"cell_type":"markdown","metadata":{"id":"JIFJ7tKiW14D"},"source":["### Part 1: Data Prep\n","\n","**10 points**\n","\n","Using the original dataframe loaded from the CSV, create a new dataframe `medalists` with the following characteristics\n","\n","\n","*   Data is filtered to only the rows that have `\"Gold\", \"Silver\", or \"Bronze\"` in `Medals`.\n","*   Any rows that have NA or NaN are dropped using `dropna()`. \n","\n","*Note: With the steps above, your new dataframe `medalists` should have 30,181 rows*\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8QBxjHDBFhyK","executionInfo":{"status":"ok","timestamp":1632205421486,"user_tz":420,"elapsed":259,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"437b0783-0465-4553-f268-6ea813cf893e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"pXXn3dyqbUlC","colab":{"base_uri":"https://localhost:8080/","height":384},"executionInfo":{"status":"ok","timestamp":1632205422811,"user_tz":420,"elapsed":1062,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"deadbc4d-ef9e-4d8a-fb98-128e4224f464"},"source":["# Write your code below\n","# Write code to load data below\n","import pandas as pd\n","import numpy as np\n","\n","athlete_events_df = pd.read_csv('/content/drive/MyDrive/2021_Fall_USF_PMS_Biotechnology/MSDS_596/data/athlete_events.csv', index_col='ID')\n","\n","# Any rows that have NA or NaN are dropped using dropna()\n","medalists = athlete_events_df.dropna()\n","medalists.count(axis=0)\n","\n","# Data is filtered to only the rows that have \"Gold\", \"Silver\", or \"Bronze\" in Medals.\n","medalists = medalists[medalists[\"Medal\"].isin([\"Gold\", \"Silver\", \"Bronze\"])]\n","medalists.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Team</th>\n","      <th>NOC</th>\n","      <th>Games</th>\n","      <th>Year</th>\n","      <th>Season</th>\n","      <th>City</th>\n","      <th>Sport</th>\n","      <th>Event</th>\n","      <th>Medal</th>\n","    </tr>\n","    <tr>\n","      <th>ID</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>16</th>\n","      <td>Juhamatti Tapio Aaltonen</td>\n","      <td>M</td>\n","      <td>28.0</td>\n","      <td>184.0</td>\n","      <td>85.0</td>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>2014 Winter</td>\n","      <td>2014</td>\n","      <td>Winter</td>\n","      <td>Sochi</td>\n","      <td>Ice Hockey</td>\n","      <td>Ice Hockey Men's Ice Hockey</td>\n","      <td>Bronze</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Paavo Johannes Aaltonen</td>\n","      <td>M</td>\n","      <td>28.0</td>\n","      <td>175.0</td>\n","      <td>64.0</td>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>1948 Summer</td>\n","      <td>1948</td>\n","      <td>Summer</td>\n","      <td>London</td>\n","      <td>Gymnastics</td>\n","      <td>Gymnastics Men's Individual All-Around</td>\n","      <td>Bronze</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Paavo Johannes Aaltonen</td>\n","      <td>M</td>\n","      <td>28.0</td>\n","      <td>175.0</td>\n","      <td>64.0</td>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>1948 Summer</td>\n","      <td>1948</td>\n","      <td>Summer</td>\n","      <td>London</td>\n","      <td>Gymnastics</td>\n","      <td>Gymnastics Men's Team All-Around</td>\n","      <td>Gold</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Paavo Johannes Aaltonen</td>\n","      <td>M</td>\n","      <td>28.0</td>\n","      <td>175.0</td>\n","      <td>64.0</td>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>1948 Summer</td>\n","      <td>1948</td>\n","      <td>Summer</td>\n","      <td>London</td>\n","      <td>Gymnastics</td>\n","      <td>Gymnastics Men's Horse Vault</td>\n","      <td>Gold</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Paavo Johannes Aaltonen</td>\n","      <td>M</td>\n","      <td>28.0</td>\n","      <td>175.0</td>\n","      <td>64.0</td>\n","      <td>Finland</td>\n","      <td>FIN</td>\n","      <td>1948 Summer</td>\n","      <td>1948</td>\n","      <td>Summer</td>\n","      <td>London</td>\n","      <td>Gymnastics</td>\n","      <td>Gymnastics Men's Pommelled Horse</td>\n","      <td>Gold</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                        Name  ...   Medal\n","ID                            ...        \n","16  Juhamatti Tapio Aaltonen  ...  Bronze\n","17   Paavo Johannes Aaltonen  ...  Bronze\n","17   Paavo Johannes Aaltonen  ...    Gold\n","17   Paavo Johannes Aaltonen  ...    Gold\n","17   Paavo Johannes Aaltonen  ...    Gold\n","\n","[5 rows x 14 columns]"]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","metadata":{"id":"z3W7N8zotZ8u"},"source":["### Part 2: Heights and Weights by Event\n","**5 points each (total 20 points)**\n","\n","Using `medalists`, answer the below questions by aggregating the column of interest by `Event` and sorting the result values.\n","\n","\n","1.   Which **Event** has the **smallest** average **height** for **female medalists**? What is it?\n","2.   Which **Event** has the **highest** average **age** for **female medalists**? What is it?\n","3.   Which **Event** has the **highest** average **weight** for **male medalists**? What is it?\n","4.   Which **Event** has the **highest** average **height** for **male medalists**? What is it?\n","\n","Note: You can use `.reset_index(inplace=True)` on your dataframe to convert all multi-indexes to normal columns, which are easier to work with.  \n","\n"]},{"cell_type":"code","metadata":{"id":"3jB-LtGabQ3O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632205422812,"user_tz":420,"elapsed":7,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"097667b3-91a0-403a-a752-7cdcf13d8534"},"source":["# Write your code and answers below\n","# 1. Which Event has the smallest average height for female medalists? What is it?\n","medalists_female = medalists[medalists[\"Sex\"].isin([\"F\"])] # only female atheltes\n","medalists_female_event = medalists_female.groupby(by=['Event']).agg(['mean'])\n","\n","min_f_height = medalists_female_event[\"Height\"].min() # 149.866667\n","print(\"Minimum average height of the female athletes is:\", float(min_f_height))\n","event_f_min_height = medalists_female_event[['Height']].idxmin()\n","print(\"Event with lowerst female height average is:\", event_f_min_height[0],\"\\n\")\n","\n","# 2. Which Event has the highest average age for female medalists? What is it?\n","max_f_age = medalists_female_event[\"Age\"].max() # 35.1875\n","print(\"Maximum average age of the female athletes is:\", float(max_f_age))\n","event_f_max_age = medalists_female_event[['Age']].idxmax()\n","print(\"Event with highest female age average is:\", event_f_max_age[0],\"\\n\")\n","\n","# 3. Which Event has the highest average weight for male medalists? What is it?\n","medalists_male = medalists[medalists[\"Sex\"].isin([\"M\"])] # only male atheltes\n","medalists_male_event = medalists_male.groupby(by=['Event']).agg(['mean'])\n","\n","max_m_weight = medalists_male_event[\"Weight\"].max() # 139.542857\n","print(\"Maximum average weight of the male athletes is:\", float(max_m_weight))\n","event_m_max_weight = medalists_male_event[['Weight']].idxmax()\n","print(\"Event with highest male weight average is:\", event_m_max_weight[0],\"\\n\")\n","\n","# 4. Which Event has the highest average height for male medalists? What is it?\n","max_m_height = medalists_male_event[\"Height\"].max() # 197.996721\n","print(\"Maximum average weight of the male athletes is:\", float(max_m_height))\n","event_m_max_height = medalists_male_event[['Height']].idxmax()\n","print(\"Event with highest male height average is:\", event_m_max_height[0],\"\\n\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Minimum average height of the female athletes is: 149.86666666666667\n","Event with lowerst female height average is: Weightlifting Women's Flyweight \n","\n","Maximum average age of the female athletes is: 35.1875\n","Event with highest female age average is: Equestrianism Mixed Dressage, Team \n","\n","Maximum average weight of the male athletes is: 139.54285714285714\n","Event with highest male weight average is: Weightlifting Men's Super-Heavyweight \n","\n","Maximum average weight of the male athletes is: 197.9967213114754\n","Event with highest male height average is: Basketball Men's Basketball \n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"PUgthZHcaiuP"},"source":["### Challenge (Not required for points)\n","\n","Use `seaborn` to plot how these biometrics have changed over the past 100 years in various sports (see last part of lecture).  In other words, create a visual that shows, for example, how the average height has changed for a given Olympic Event (like Gymnastics) over time."]},{"cell_type":"code","metadata":{"id":"uW89kaR72NhY","colab":{"base_uri":"https://localhost:8080/","height":296},"executionInfo":{"status":"ok","timestamp":1632205423189,"user_tz":420,"elapsed":381,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"b5c05303-d6da-4354-fed0-bd10d8bdb691"},"source":["# Challenge code\n","import seaborn as sns\n","# how the average height has changed for a given Olympic Event over time.\n","athlete_events_gymnastics = athlete_events_df.dropna()\n","athlete_events_gymnastics = athlete_events_gymnastics[athlete_events_gymnastics[\"Sport\"].isin([\"Gymnastics\"])]\n","athlete_events_gymnastics_avg_year = athlete_events_gymnastics.groupby(by=['Year']).agg(\"mean\")\n","\n","sns.lineplot(data=athlete_events_gymnastics_avg_year, \n","             x=\"Year\", \n","             y=\"Height\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f37cf05cf10>"]},"metadata":{},"execution_count":85},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"BSl1lkIz3XU_"},"source":["## Section 2: Winter vs Summer\n","**70 points total**\n","\n","Let's try to answer the question:\n","\n","*Which countries perform better in the Winter Olympics as compared to the Summer Olympics?*\n","\n","To do this, we will take the following general steps:\n","\n","\n","*   Create a metric to evaluate Olympic performance\n","*   Calculate that metric for every country and season (Summer/Winter)\n","*   For a given country, compare the relative contribution to the metric from the Summer Olympics vs the Winter Olympics\n","*   Rank them by highest relative performance in the Winter Olympics\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Y_oEbOni4BXT"},"source":["### Part 1: Filter Data and Fill NA\n","**5 point each (total 10 points)**\n","\n","1.   The Winter Olympics have only been around since 1924 while the Summer Olympics started in 1896.  Let's filter this dataframe to `Year >= 1924` so that we have an even playing field within which to compare Winter performance to Summer performance.\n","2.   The `Medal` column contains many `NaN` values.  Use `fillna` to substitute these values with `\"None\"` (i.e. the string \"None\") instead.\n"]},{"cell_type":"code","metadata":{"id":"zw6ba3mzKuqi","colab":{"base_uri":"https://localhost:8080/","height":367},"executionInfo":{"status":"ok","timestamp":1632205423478,"user_tz":420,"elapsed":293,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"683ac6eb-25b1-48cd-d7d7-f785a4c61947"},"source":["# Write code below\n","# 1. filter this dataframe to Year >= 1924\n","athlete_events_after_1924 = athlete_events_df[athlete_events_df[\"Year\"] >= 1924]\n","# 2. fill Na values in Medal column\n","athlete_events_after_1924 = athlete_events_after_1924.fillna(value=\"None\")\n","athlete_events_after_1924.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Team</th>\n","      <th>NOC</th>\n","      <th>Games</th>\n","      <th>Year</th>\n","      <th>Season</th>\n","      <th>City</th>\n","      <th>Sport</th>\n","      <th>Event</th>\n","      <th>Medal</th>\n","    </tr>\n","    <tr>\n","      <th>ID</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>A Dijiang</td>\n","      <td>M</td>\n","      <td>24</td>\n","      <td>180</td>\n","      <td>80</td>\n","      <td>China</td>\n","      <td>CHN</td>\n","      <td>1992 Summer</td>\n","      <td>1992</td>\n","      <td>Summer</td>\n","      <td>Barcelona</td>\n","      <td>Basketball</td>\n","      <td>Basketball Men's Basketball</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A Lamusi</td>\n","      <td>M</td>\n","      <td>23</td>\n","      <td>170</td>\n","      <td>60</td>\n","      <td>China</td>\n","      <td>CHN</td>\n","      <td>2012 Summer</td>\n","      <td>2012</td>\n","      <td>Summer</td>\n","      <td>London</td>\n","      <td>Judo</td>\n","      <td>Judo Men's Extra-Lightweight</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Christine Jacoba Aaftink</td>\n","      <td>F</td>\n","      <td>21</td>\n","      <td>185</td>\n","      <td>82</td>\n","      <td>Netherlands</td>\n","      <td>NED</td>\n","      <td>1988 Winter</td>\n","      <td>1988</td>\n","      <td>Winter</td>\n","      <td>Calgary</td>\n","      <td>Speed Skating</td>\n","      <td>Speed Skating Women's 500 metres</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Christine Jacoba Aaftink</td>\n","      <td>F</td>\n","      <td>21</td>\n","      <td>185</td>\n","      <td>82</td>\n","      <td>Netherlands</td>\n","      <td>NED</td>\n","      <td>1988 Winter</td>\n","      <td>1988</td>\n","      <td>Winter</td>\n","      <td>Calgary</td>\n","      <td>Speed Skating</td>\n","      <td>Speed Skating Women's 1,000 metres</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Christine Jacoba Aaftink</td>\n","      <td>F</td>\n","      <td>25</td>\n","      <td>185</td>\n","      <td>82</td>\n","      <td>Netherlands</td>\n","      <td>NED</td>\n","      <td>1992 Winter</td>\n","      <td>1992</td>\n","      <td>Winter</td>\n","      <td>Albertville</td>\n","      <td>Speed Skating</td>\n","      <td>Speed Skating Women's 500 metres</td>\n","      <td>None</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                        Name Sex  ...                               Event Medal\n","ID                                ...                                          \n","1                  A Dijiang   M  ...         Basketball Men's Basketball  None\n","2                   A Lamusi   M  ...        Judo Men's Extra-Lightweight  None\n","5   Christine Jacoba Aaftink   F  ...    Speed Skating Women's 500 metres  None\n","5   Christine Jacoba Aaftink   F  ...  Speed Skating Women's 1,000 metres  None\n","5   Christine Jacoba Aaftink   F  ...    Speed Skating Women's 500 metres  None\n","\n","[5 rows x 14 columns]"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","metadata":{"id":"laVFsKMKKyLc"},"source":["### Part 2: Calculate Weighted Medal Points\n","**5 points for the function, 5 points for the transformation, 5 points for adding the column (15 points total)**\n","\n","When evaluating country performance in the Olympics, we don't want to count Gold medals as equivalent to Silver/Bronze medals.  Let's assign \"Medal Points\" to each tier of Olympic medal as follows:\n","\n","*   Gold:  3 points\n","*   Silver: 2 points\n","*   Bronze: 1 point\n","*   No medal: 0 points\n","\n","Write a function `medal_to_points` to transform and create a new column called `MedalPoints`.  `medal_to_points` will accept a string (possible values are `\"Gold\"`, `\"Silver\"`, `\"Bronze\"`, `\"None\"`) and returns the appropriate number of points as an integer.\n","\n","Then add a new column `MedalPoints` to your dataframe using `transform` and the newly defined function `medal_to_points`"]},{"cell_type":"code","metadata":{"id":"4hPbmDqDKxYp"},"source":["# Define medal_to_points below\n","# Function to add new column based on the values in the Medal column\n","def medal_to_points(medal_name):\n","    # Insert logic to convert medal to point value\n","    medal_name.loc[medal_name.Medal == 'Gold', 'MedalPoints'] = 3\n","    medal_name.loc[medal_name.Medal == 'Gold', 'MedalPoints'] = 3\n","    medal_name.loc[medal_name.Medal == 'Silver', 'MedalPoints'] = 2\n","    medal_name.loc[medal_name.Medal == 'Bronze', 'MedalPoints'] = 1\n","    medal_name.loc[medal_name.Medal == 'None', 'MedalPoints'] = 0\n","    # Return the converted point value\n","    return medal_name\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yEwmyitI3sCy"},"source":["athlete_events_after_1924_points = medal_to_points(athlete_events_after_1924)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jkMzMLabNoVs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632205423763,"user_tz":420,"elapsed":15,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"2a9fbfcf-ff09-4b23-c0e3-c104616fafb5"},"source":["# Write code to add new column MedalPoints to your dataframe\n","# This was performed with the function\n","athlete_events_after_1924_points.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Team</th>\n","      <th>NOC</th>\n","      <th>Games</th>\n","      <th>Year</th>\n","      <th>Season</th>\n","      <th>City</th>\n","      <th>Sport</th>\n","      <th>Event</th>\n","      <th>Medal</th>\n","      <th>MedalPoints</th>\n","    </tr>\n","    <tr>\n","      <th>ID</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>A Dijiang</td>\n","      <td>M</td>\n","      <td>24</td>\n","      <td>180</td>\n","      <td>80</td>\n","      <td>China</td>\n","      <td>CHN</td>\n","      <td>1992 Summer</td>\n","      <td>1992</td>\n","      <td>Summer</td>\n","      <td>Barcelona</td>\n","      <td>Basketball</td>\n","      <td>Basketball Men's Basketball</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A Lamusi</td>\n","      <td>M</td>\n","      <td>23</td>\n","      <td>170</td>\n","      <td>60</td>\n","      <td>China</td>\n","      <td>CHN</td>\n","      <td>2012 Summer</td>\n","      <td>2012</td>\n","      <td>Summer</td>\n","      <td>London</td>\n","      <td>Judo</td>\n","      <td>Judo Men's Extra-Lightweight</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Christine Jacoba Aaftink</td>\n","      <td>F</td>\n","      <td>21</td>\n","      <td>185</td>\n","      <td>82</td>\n","      <td>Netherlands</td>\n","      <td>NED</td>\n","      <td>1988 Winter</td>\n","      <td>1988</td>\n","      <td>Winter</td>\n","      <td>Calgary</td>\n","      <td>Speed Skating</td>\n","      <td>Speed Skating Women's 500 metres</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Christine Jacoba Aaftink</td>\n","      <td>F</td>\n","      <td>21</td>\n","      <td>185</td>\n","      <td>82</td>\n","      <td>Netherlands</td>\n","      <td>NED</td>\n","      <td>1988 Winter</td>\n","      <td>1988</td>\n","      <td>Winter</td>\n","      <td>Calgary</td>\n","      <td>Speed Skating</td>\n","      <td>Speed Skating Women's 1,000 metres</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Christine Jacoba Aaftink</td>\n","      <td>F</td>\n","      <td>25</td>\n","      <td>185</td>\n","      <td>82</td>\n","      <td>Netherlands</td>\n","      <td>NED</td>\n","      <td>1992 Winter</td>\n","      <td>1992</td>\n","      <td>Winter</td>\n","      <td>Albertville</td>\n","      <td>Speed Skating</td>\n","      <td>Speed Skating Women's 500 metres</td>\n","      <td>None</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                        Name Sex  ... Medal MedalPoints\n","ID                                ...                  \n","1                  A Dijiang   M  ...  None         0.0\n","2                   A Lamusi   M  ...  None         0.0\n","5   Christine Jacoba Aaftink   F  ...  None         0.0\n","5   Christine Jacoba Aaftink   F  ...  None         0.0\n","5   Christine Jacoba Aaftink   F  ...  None         0.0\n","\n","[5 rows x 15 columns]"]},"metadata":{},"execution_count":89}]},{"cell_type":"markdown","metadata":{"id":"DqjRwITCN3cy"},"source":["### Part 3: Aggregate MedalPoints\n","**15 points**\n","\n","We need to figure out how each country (NOC) performed in the Summer, and how each country performed in the winter.  Now that we have created the performance metric `MedalPoints`, we need to aggregate to figure out how many `MedalPoints` each country earned in each season (Summer and Winter).\n","\n","1.   Using `NOC` for country and `Season` for season, determine the total number of `MedalPoints` that each country earned in each season (Summer vs Winter)\n","2.   Store the results of the above in a new dataframe\n","\n"]},{"cell_type":"code","metadata":{"id":"he3Cco-3Og2K","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632205423763,"user_tz":420,"elapsed":14,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"444643c5-67e6-4e94-860a-7c77ff7154f5"},"source":["# Write your code below\n","country_season_points = athlete_events_after_1924_points.groupby(by=['NOC','Season'], as_index=False)['MedalPoints'].sum()\n","country_season_points = country_season_points.sort_values(by=\"MedalPoints\", ascending=False)\n","country_season_points.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NOC</th>\n","      <th>Season</th>\n","      <th>MedalPoints</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>325</th>\n","      <td>USA</td>\n","      <td>Summer</td>\n","      <td>9412.0</td>\n","    </tr>\n","    <tr>\n","      <th>321</th>\n","      <td>URS</td>\n","      <td>Summer</td>\n","      <td>4362.0</td>\n","    </tr>\n","    <tr>\n","      <th>117</th>\n","      <td>GER</td>\n","      <td>Summer</td>\n","      <td>3090.0</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>ITA</td>\n","      <td>Summer</td>\n","      <td>2522.0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>AUS</td>\n","      <td>Summer</td>\n","      <td>2398.0</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>GBR</td>\n","      <td>Summer</td>\n","      <td>2246.0</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>FRA</td>\n","      <td>Summer</td>\n","      <td>2179.0</td>\n","    </tr>\n","    <tr>\n","      <th>135</th>\n","      <td>HUN</td>\n","      <td>Summer</td>\n","      <td>2150.0</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>CHN</td>\n","      <td>Summer</td>\n","      <td>1894.0</td>\n","    </tr>\n","    <tr>\n","      <th>112</th>\n","      <td>GDR</td>\n","      <td>Summer</td>\n","      <td>1798.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     NOC  Season  MedalPoints\n","325  USA  Summer       9412.0\n","321  URS  Summer       4362.0\n","117  GER  Summer       3090.0\n","153  ITA  Summer       2522.0\n","18   AUS  Summer       2398.0\n","109  GBR  Summer       2246.0\n","102  FRA  Summer       2179.0\n","135  HUN  Summer       2150.0\n","59   CHN  Summer       1894.0\n","112  GDR  Summer       1798.0"]},"metadata":{},"execution_count":90}]},{"cell_type":"markdown","metadata":{"id":"lONv1Jj2OjKA"},"source":["### Part 4: Calculate the % of Medal Pts earned in each Season for each Country\n","**15 points**\n","\n","To determine which countries perform better in Winter as compared to Summer, let's rank them by the % of Medal Points earned in the Winter.  In order to do this, we need to calculate a % of total medal points earned by season (Summer vs Winter).\n","\n","Using a function (can be a lambda function), create a new column `PctWinterMedalPoints` in the data frame by transforming `Medal Points`. **Note: if stuck here, see lecture and lecture notes where we did a similar transformation** \n"," \n","\n"]},{"cell_type":"code","metadata":{"id":"mhsNQC31SwRe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632205423764,"user_tz":420,"elapsed":13,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"f5d77196-9578-420c-e693-eeefc35d1893"},"source":["# Write your code below\n","country_season_points['PctWinterMedalPoints'] = country_season_points.groupby(by=['Season'])['MedalPoints'].transform(lambda x: x*100/x.sum())\n","country_season_points.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NOC</th>\n","      <th>Season</th>\n","      <th>MedalPoints</th>\n","      <th>PctWinterMedalPoints</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>325</th>\n","      <td>USA</td>\n","      <td>Summer</td>\n","      <td>9412.0</td>\n","      <td>16.113955</td>\n","    </tr>\n","    <tr>\n","      <th>321</th>\n","      <td>URS</td>\n","      <td>Summer</td>\n","      <td>4362.0</td>\n","      <td>7.468027</td>\n","    </tr>\n","    <tr>\n","      <th>117</th>\n","      <td>GER</td>\n","      <td>Summer</td>\n","      <td>3090.0</td>\n","      <td>5.290281</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>ITA</td>\n","      <td>Summer</td>\n","      <td>2522.0</td>\n","      <td>4.317828</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>AUS</td>\n","      <td>Summer</td>\n","      <td>2398.0</td>\n","      <td>4.105532</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     NOC  Season  MedalPoints  PctWinterMedalPoints\n","325  USA  Summer       9412.0             16.113955\n","321  URS  Summer       4362.0              7.468027\n","117  GER  Summer       3090.0              5.290281\n","153  ITA  Summer       2522.0              4.317828\n","18   AUS  Summer       2398.0              4.105532"]},"metadata":{},"execution_count":91}]},{"cell_type":"markdown","metadata":{"id":"3aN1xyKZRcBz"},"source":["### Part 5: Report Results\n","**15 points**\n","\n","For countries **earning at least 100 MedalPoints in the Winter Olympics**, list the top 3 countries that earned the highest % of their Medal Points in the Winter Olympics.  Also list the percentage of Medal Points earned and total number of Medal Points earned in the Winter Olympics."]},{"cell_type":"code","metadata":{"id":"0xLfKkc1Syi7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632205423764,"user_tz":420,"elapsed":13,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"c6b16d31-451b-4617-a2e7-2f4dddfc880d"},"source":["# Write your code below\n","country_season_points_100_plus = country_season_points[country_season_points['MedalPoints'] > 100]  \n","country_season_points_100_plus_winter = country_season_points_100_plus[country_season_points_100_plus.Season == 'Winter']\n","country_season_points_100_plus_winter.head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NOC</th>\n","      <th>Season</th>\n","      <th>MedalPoints</th>\n","      <th>PctWinterMedalPoints</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>52</th>\n","      <td>CAN</td>\n","      <td>Winter</td>\n","      <td>1420.0</td>\n","      <td>12.437593</td>\n","    </tr>\n","    <tr>\n","      <th>326</th>\n","      <td>USA</td>\n","      <td>Winter</td>\n","      <td>1275.0</td>\n","      <td>11.167557</td>\n","    </tr>\n","    <tr>\n","      <th>322</th>\n","      <td>URS</td>\n","      <td>Winter</td>\n","      <td>1037.0</td>\n","      <td>9.082946</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     NOC  Season  MedalPoints  PctWinterMedalPoints\n","52   CAN  Winter       1420.0             12.437593\n","326  USA  Winter       1275.0             11.167557\n","322  URS  Winter       1037.0              9.082946"]},"metadata":{},"execution_count":92}]}]}