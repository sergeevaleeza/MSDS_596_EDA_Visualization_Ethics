{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of MSDS 596 - Week 3 - Lecture Notes","provenance":[{"file_id":"1dt_YaapnJUrsFpVeycSltt1L27jeoWRK","timestamp":1633935815838}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"iJZNkOav9WTo"},"source":["# Exploratory Data Analysis with `pandas`\n","\n","`pandas` is a popular data analysis library written in Python.  It provides the tools that enable you to quickly and easily ingest, explore, manipulate, transform, and analyze data. \n","\n","`pandas` website: [https://pandas.pydata.org/](https://pandas.pydata.org/)\n","\n","Let's explore how we can use this powerful library by first loading in a data set.\n"]},{"cell_type":"markdown","metadata":{"id":"Hx_zGfKKNPn1"},"source":["## Loading Data into `pandas`"]},{"cell_type":"markdown","metadata":{"id":"SvK5tOkTF6ou"},"source":["**Step 1: Prepare data**\n","\n","Download the data set `cereal.csv` from Canvas Module 2.\n","We will be using this data set for today's lecture.\n","\n","Upload this data to your Google Drive folder.\n"]},{"cell_type":"markdown","metadata":{"id":"_5bIFdN6COw7"},"source":["**Step 2: Import pandas**"]},{"cell_type":"code","metadata":{"id":"YMUAKFSCCH1J"},"source":["import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"igdhD8eZEfE_"},"source":["cereal = pd.read_csv('/content/drive/MyDrive/MSDS 596 - Fall 2021/Data/cereal.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nFLYRKh4Zy2k"},"source":["type(cereal)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"H7m4bUuBZ3ux","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1631592062363,"user_tz":420,"elapsed":162,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"b7100411-3b4e-48dc-ab40-f4408ad8487f"},"source":["# First n rows of cereal\n","cereal.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>mfr</th>\n","      <th>type</th>\n","      <th>calories</th>\n","      <th>protein</th>\n","      <th>fat</th>\n","      <th>sodium</th>\n","      <th>fiber</th>\n","      <th>carbo</th>\n","      <th>sugars</th>\n","      <th>potass</th>\n","      <th>vitamins</th>\n","      <th>shelf</th>\n","      <th>weight</th>\n","      <th>cups</th>\n","      <th>rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100% Bran</td>\n","      <td>N</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>130</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>6</td>\n","      <td>280</td>\n","      <td>25</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>68.402973</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100% Natural Bran</td>\n","      <td>Q</td>\n","      <td>C</td>\n","      <td>120</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>2.0</td>\n","      <td>8.0</td>\n","      <td>8</td>\n","      <td>135</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>33.983679</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>All-Bran</td>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>260</td>\n","      <td>9.0</td>\n","      <td>7.0</td>\n","      <td>5</td>\n","      <td>320</td>\n","      <td>25</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>59.425505</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>All-Bran with Extra Fiber</td>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>50</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>14.0</td>\n","      <td>8.0</td>\n","      <td>0</td>\n","      <td>330</td>\n","      <td>25</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>0.50</td>\n","      <td>93.704912</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Almond Delight</td>\n","      <td>R</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>14.0</td>\n","      <td>8</td>\n","      <td>-1</td>\n","      <td>25</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>34.384843</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                        name mfr type  calories  ...  shelf  weight  cups     rating\n","0                  100% Bran   N    C        70  ...      3     1.0  0.33  68.402973\n","1          100% Natural Bran   Q    C       120  ...      3     1.0  1.00  33.983679\n","2                   All-Bran   K    C        70  ...      3     1.0  0.33  59.425505\n","3  All-Bran with Extra Fiber   K    C        50  ...      3     1.0  0.50  93.704912\n","4             Almond Delight   R    C       110  ...      3     1.0  0.75  34.384843\n","\n","[5 rows x 16 columns]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"dKr3AxJPaC1w"},"source":["# Returns (row_count, column count) of dataframe\n","cereal.shape"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y9E60c7Zd15-"},"source":["## `pandas` Series and DataFrames\n","\n","A series is like a single column of data.  It behaves a lot like a `numpy` array because that is exactly what it is on the backend.\n","\n","A dataframe consists of multiple series.  You can think of it like a spreadsheet with rows and columns."]},{"cell_type":"code","metadata":{"id":"TextDJ54j2JO"},"source":["# <dataframe>.info() provides a summary of the contents of the dataframe\n","cereal.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2vTXbYtSfhRn"},"source":["# One column from the dataframe is a series\n","manufacturer = cereal['mfr']\n","type(manufacturer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ivyHFyQQgrWW"},"source":["# What does a series look like?\n","manufacturer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DOpyRtzrhqmE"},"source":["manufacturer[0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u6bizelMg5qI"},"source":["# Setting the index of the manufacturer Series\n","manufacturer.index = cereal['name']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lR0xxzL7g91Y"},"source":["manufacturer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"luKx-KmOlxnB"},"source":["# Now we can access rows by name instead of a number\n","manufacturer['Trix']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iobWQj-xf14M"},"source":["manufacturer.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oSk2QHRsf0Rd"},"source":["# Produces a frequency distribution of the values in the Series\n","manufacturer.value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l1WGvtg6fa_C"},"source":["# Load in the data as a dataframe again, this time specifying the index column at load time\n","cereal = pd.read_csv('/content/drive/MyDrive/MSDS 596 - Fall 2021/Data/cereal.csv', index_col='name')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gdc1BtLRK1Ml"},"source":["cereal"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i5iWVeespxGa"},"source":["## Accessing Data in a Dataframe\n","\n","There are many ways to access and select the desired data in a dataframe.\n","\n","**`.loc`** (use the index name to access specific rows, cols, data points)\n","- `.loc[row_index]` to access a specific row identified by a specific `row_index` value\n","- `.loc[row_index, column_index]` to access a specific data point identified by the `row_index` and `column_index` (which is generally the column name)\n","\n","**`.iloc`** (use the integer index value to access specific rows, cols, data points)\n","- `.iloc[row_index]` to access a row by the integer index number\n","- `.iloc[row_index, column_index]` to access a specific data point identified by the specified integer index numbers\n","\n","**condition based**\n","- create boolean arrays that specify certain conditions, then subset by them"]},{"cell_type":"markdown","metadata":{"id":"_dZjwc8KGOBm"},"source":["### Selecting via index"]},{"cell_type":"code","metadata":{"id":"EC2g2vWMm_VN"},"source":["# .loc\n","# Grab a row using the index name\n","cereal.loc['Cinnamon Toast Crunch', :]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WBstt77AstYN"},"source":["# Grab a column using the column name\n","a = cereal.loc[:,'calories']\n","\n","# Shorthand\n","b = cereal.calories\n","# or\n","c = cereal['calories']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-RcutnmqgFWJ"},"source":["a"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xAODzMQxs7oY"},"source":["# Grab a specific data point using both row and column names\n","cereal.loc['Apple Jacks','calories']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y4HYOLJ5XOSr"},"source":["cereals_i_like = cereal.loc[['Apple Jacks', 'Cheerios', 'Cinnamon Toast Crunch'], ['calories', 'sugars', 'mfr']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fJgdTaZBXqph"},"source":["type(cereals_i_like)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P7m72NFxgoPk"},"source":["cereals_i_like"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4FBPXcXItNWM"},"source":["# .iloc\n","# Grab a specific row (-1 being the last row)\n","cereal.iloc[-1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uDXWFJMftX5S"},"source":["# Grab a specific column (column order is from left to right)\n","cereal.iloc[:,0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OPP1EUW0tdLC"},"source":["# Grab a specific data point\n","cereal.iloc[-1, 0]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"opHsQ8BFGKdC"},"source":["### Conditional selection via boolean arrays"]},{"cell_type":"code","metadata":{"id":"ACCqEjKXtt0X"},"source":["# Conditional selection by creating boolean arrays\n","is_high_sugar = cereal.sugars >= 10  # Defining high sugar as greater than 10g\n","is_high_sugar"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xjoDDFd1C8GO"},"source":["cereal[is_high_sugar].head(n=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jpGTTApqDEo2"},"source":["# Combining multiple boolean arrays to filter\n","# First let's create a second condition\n","is_high_carb = cereal.carbo >= 10 \n","\n","# To combine them, we can use bitwise operators\n","# & = and\n","# | = or\n","# ~ = not\n","\n","cereal[is_high_sugar | is_high_carb].loc[:,['mfr', 'calories', 'carbo', 'sugars']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VAZcVXcBuIHT"},"source":["# Other ways to make boolean arrays for conditional selection\n","\n","# Testing a string\n","# We use index in these examples below because we've made the name the index\n","# and this is one of the few strings in this data set\n","# Normally you should replace index with a .loc[:,'column_name']\n","honey_in_name = cereal.index.str.contains(\"Honey\")  # The cereal name contains the word \"Honey\"\n","starts_with_apple = cereal.index.str.startswith(\"Apple\") # The cereal name starts with \"Apple\"\n","is_cheerio = cereal.index.str.lower().str.contains(\"cheerio\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4nLUYY9OGyf9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631591841321,"user_tz":420,"elapsed":292,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"9ec7da6e-bcdc-473b-fff5-6473da34615e"},"source":["cereal[honey_in_name]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    Wheaties Honey Gold\n","1     Honey Nut Cheerios\n","2       Nut&Honey Crunch\n","3             Honey-comb\n","4       Honey Graham Ohs\n","Name: name, dtype: object"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"V_t7ltJMIp07"},"source":["### Sort Values"]},{"cell_type":"code","metadata":{"id":"TRWodaJeIo5m"},"source":["# Sorting values is helpful when exploring the data\n","\n","cereal.sort_values(by=['calories', 'sodium'], ascending=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cRHDa_o6G0OV"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FSLOg0bD03-S"},"source":["## Data Cleaning and Preparation\n","\n","A common problem with data is that it doesn't come to you in a perfectly usable form.  Oftentimes you need to clean it through various techniques such as those listed below:\n","- dropping unnecessary columns\n","- removing or treating duplicates\n","- replacing values\n","- creating new columns\n","- handling null or missing values\n","\n","`pandas` enables you to perform these types of cleaning relatively easily\n"]},{"cell_type":"markdown","metadata":{"id":"UBNIceyC3X4h"},"source":["### Dropping Unnecessary Columns"]},{"cell_type":"code","metadata":{"id":"72v5MuCC58zJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630859668856,"user_tz":420,"elapsed":151,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"2c209206-a1a1-4dc7-9cfc-75d2fb38045b"},"source":["# Dropping unnecessary columns\n","# Let's say we don't need the 'shelf' column\n","\n","# One way is to create a new dataframe using only the columns we want to keep\n","cereal.columns # produces a list of columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['mfr', 'type', 'calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo',\n","       'sugars', 'potass', 'vitamins', 'shelf', 'weight', 'cups', 'rating'],\n","      dtype='object')"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"0yLlJ00_b_2S"},"source":["# Remove shelf\n","# labels: a list of column names you want to drop\n","# axis: 1 to signify dropping columns\n","# inplace: If False, return a copy. Otherwise do operation inplace and return None\n","cereal.drop(labels=['shelf'], axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_F_F0xdD3N8Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630859857054,"user_tz":420,"elapsed":149,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"2491cd8d-796d-4118-81bf-5ed364bd02bf"},"source":["# No more shelf\n","cereal.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['mfr', 'type', 'calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo',\n","       'sugars', 'potass', 'vitamins', 'weight', 'cups', 'rating'],\n","      dtype='object')"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"90AnsMRl8DRB"},"source":["### Create new columns"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"txgZJGjP009t","executionInfo":{"status":"ok","timestamp":1630859913063,"user_tz":420,"elapsed":168,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"c5274d5d-6a11-4b12-96db-e66122e8de06"},"source":["cereal.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mfr</th>\n","      <th>type</th>\n","      <th>calories</th>\n","      <th>protein</th>\n","      <th>fat</th>\n","      <th>sodium</th>\n","      <th>fiber</th>\n","      <th>carbo</th>\n","      <th>sugars</th>\n","      <th>potass</th>\n","      <th>vitamins</th>\n","      <th>weight</th>\n","      <th>cups</th>\n","      <th>rating</th>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>100% Bran</th>\n","      <td>N</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>130</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>6</td>\n","      <td>280</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>68.402973</td>\n","    </tr>\n","    <tr>\n","      <th>100% Natural Bran</th>\n","      <td>Q</td>\n","      <td>C</td>\n","      <td>120</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>2.0</td>\n","      <td>8.0</td>\n","      <td>8</td>\n","      <td>135</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>33.983679</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran</th>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>260</td>\n","      <td>9.0</td>\n","      <td>7.0</td>\n","      <td>5</td>\n","      <td>320</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>59.425505</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran with Extra Fiber</th>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>50</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>14.0</td>\n","      <td>8.0</td>\n","      <td>0</td>\n","      <td>330</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.50</td>\n","      <td>93.704912</td>\n","    </tr>\n","    <tr>\n","      <th>Almond Delight</th>\n","      <td>R</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>14.0</td>\n","      <td>8</td>\n","      <td>-1</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>34.384843</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                          mfr type  calories  ...  weight  cups     rating\n","name                                          ...                         \n","100% Bran                   N    C        70  ...     1.0  0.33  68.402973\n","100% Natural Bran           Q    C       120  ...     1.0  1.00  33.983679\n","All-Bran                    K    C        70  ...     1.0  0.33  59.425505\n","All-Bran with Extra Fiber   K    C        50  ...     1.0  0.50  93.704912\n","Almond Delight              R    C       110  ...     1.0  0.75  34.384843\n","\n","[5 rows x 14 columns]"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"NWG0vwyb8Ix6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630859965746,"user_tz":420,"elapsed":142,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"7767d38c-06e2-4ce5-a969-dbf7ee1b5f9f"},"source":["# We can add new columns to the dataframe\n","# Let's make a new column called calories per cup\n","# This will help normalize the caloric density of each cereal\n","\n","# First let's make the Series.  Then we'll add it to the dataframe\n","calories_per_cup = cereal.calories / cereal.cups\n","\n","# Confirm that data looks reasonable\n","calories_per_cup"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name\n","100% Bran                    212.121212\n","100% Natural Bran            120.000000\n","All-Bran                     212.121212\n","All-Bran with Extra Fiber    100.000000\n","Almond Delight               146.666667\n","                                ...    \n","Triples                      146.666667\n","Trix                         110.000000\n","Wheat Chex                   149.253731\n","Wheaties                     100.000000\n","Wheaties Honey Gold          146.666667\n","Length: 77, dtype: float64"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"HgwMC8NRvtHb"},"source":["cereal['calories_per_cup'] = calories_per_cup"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":454},"id":"_jaFqEH51Nkb","executionInfo":{"status":"ok","timestamp":1630860009997,"user_tz":420,"elapsed":159,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"f7c632bc-4268-43f9-cf5b-da9482927e60"},"source":["cereal"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mfr</th>\n","      <th>type</th>\n","      <th>calories</th>\n","      <th>protein</th>\n","      <th>fat</th>\n","      <th>sodium</th>\n","      <th>fiber</th>\n","      <th>carbo</th>\n","      <th>sugars</th>\n","      <th>potass</th>\n","      <th>vitamins</th>\n","      <th>weight</th>\n","      <th>cups</th>\n","      <th>rating</th>\n","      <th>calories_per_cup</th>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>100% Bran</th>\n","      <td>N</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>130</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>6</td>\n","      <td>280</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>68.402973</td>\n","      <td>212.121212</td>\n","    </tr>\n","    <tr>\n","      <th>100% Natural Bran</th>\n","      <td>Q</td>\n","      <td>C</td>\n","      <td>120</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>2.0</td>\n","      <td>8.0</td>\n","      <td>8</td>\n","      <td>135</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>33.983679</td>\n","      <td>120.000000</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran</th>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>260</td>\n","      <td>9.0</td>\n","      <td>7.0</td>\n","      <td>5</td>\n","      <td>320</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>59.425505</td>\n","      <td>212.121212</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran with Extra Fiber</th>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>50</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>14.0</td>\n","      <td>8.0</td>\n","      <td>0</td>\n","      <td>330</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.50</td>\n","      <td>93.704912</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Almond Delight</th>\n","      <td>R</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>14.0</td>\n","      <td>8</td>\n","      <td>-1</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>34.384843</td>\n","      <td>146.666667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Triples</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>250</td>\n","      <td>0.0</td>\n","      <td>21.0</td>\n","      <td>3</td>\n","      <td>60</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>39.106174</td>\n","      <td>146.666667</td>\n","    </tr>\n","    <tr>\n","      <th>Trix</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>140</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>12</td>\n","      <td>25</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>27.753301</td>\n","      <td>110.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Wheat Chex</th>\n","      <td>R</td>\n","      <td>C</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>230</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3</td>\n","      <td>115</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.67</td>\n","      <td>49.787445</td>\n","      <td>149.253731</td>\n","    </tr>\n","    <tr>\n","      <th>Wheaties</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3</td>\n","      <td>110</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>51.592193</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Wheaties Honey Gold</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>16.0</td>\n","      <td>8</td>\n","      <td>60</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>36.187559</td>\n","      <td>146.666667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>77 rows × 15 columns</p>\n","</div>"],"text/plain":["                          mfr type  calories  ...  cups     rating  calories_per_cup\n","name                                          ...                                   \n","100% Bran                   N    C        70  ...  0.33  68.402973        212.121212\n","100% Natural Bran           Q    C       120  ...  1.00  33.983679        120.000000\n","All-Bran                    K    C        70  ...  0.33  59.425505        212.121212\n","All-Bran with Extra Fiber   K    C        50  ...  0.50  93.704912        100.000000\n","Almond Delight              R    C       110  ...  0.75  34.384843        146.666667\n","...                        ..  ...       ...  ...   ...        ...               ...\n","Triples                     G    C       110  ...  0.75  39.106174        146.666667\n","Trix                        G    C       110  ...  1.00  27.753301        110.000000\n","Wheat Chex                  R    C       100  ...  0.67  49.787445        149.253731\n","Wheaties                    G    C       100  ...  1.00  51.592193        100.000000\n","Wheaties Honey Gold         G    C       110  ...  0.75  36.187559        146.666667\n","\n","[77 rows x 15 columns]"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"sCxZyIGA5hCB"},"source":["### Replacing Values\n"]},{"cell_type":"code","metadata":{"id":"PmGVHtNs6L5s"},"source":["# Let's update the manufacturer names to their full names\n","# Create a dictionary where the keys represent the values in the dataframe you want to replace\n","# The values are the new values you want to use\n","replacements = {\n","    \"A\": \"American Home Food Products\",\n","    \"G\": \"General Mills\",\n","    \"K\": \"Kellogs\",\n","    \"N\": \"Nabisco\",\n","    \"Q\": \"Quaker Oats\",\n","    \"R\": \"Ralston Purina\",\n","    \"P\": \"Post\"\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TnySQhaUmhGO"},"source":["cereal['full_mfr_names'] = cereal.mfr.map(replacements)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":454},"id":"KD9-BztnmsBm","executionInfo":{"status":"ok","timestamp":1630860119689,"user_tz":420,"elapsed":193,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"436d4f02-0d76-4e7f-b2b0-30c6eaabcadb"},"source":["cereal"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mfr</th>\n","      <th>type</th>\n","      <th>calories</th>\n","      <th>protein</th>\n","      <th>fat</th>\n","      <th>sodium</th>\n","      <th>fiber</th>\n","      <th>carbo</th>\n","      <th>sugars</th>\n","      <th>potass</th>\n","      <th>vitamins</th>\n","      <th>weight</th>\n","      <th>cups</th>\n","      <th>rating</th>\n","      <th>calories_per_cup</th>\n","      <th>full_mfr_names</th>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>100% Bran</th>\n","      <td>N</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>130</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>6</td>\n","      <td>280</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>68.402973</td>\n","      <td>212.121212</td>\n","      <td>Nabisco</td>\n","    </tr>\n","    <tr>\n","      <th>100% Natural Bran</th>\n","      <td>Q</td>\n","      <td>C</td>\n","      <td>120</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>2.0</td>\n","      <td>8.0</td>\n","      <td>8</td>\n","      <td>135</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>33.983679</td>\n","      <td>120.000000</td>\n","      <td>Quaker Oats</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran</th>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>260</td>\n","      <td>9.0</td>\n","      <td>7.0</td>\n","      <td>5</td>\n","      <td>320</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>59.425505</td>\n","      <td>212.121212</td>\n","      <td>Kellogs</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran with Extra Fiber</th>\n","      <td>K</td>\n","      <td>C</td>\n","      <td>50</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>14.0</td>\n","      <td>8.0</td>\n","      <td>0</td>\n","      <td>330</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.50</td>\n","      <td>93.704912</td>\n","      <td>100.000000</td>\n","      <td>Kellogs</td>\n","    </tr>\n","    <tr>\n","      <th>Almond Delight</th>\n","      <td>R</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>14.0</td>\n","      <td>8</td>\n","      <td>-1</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>34.384843</td>\n","      <td>146.666667</td>\n","      <td>Ralston Purina</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Triples</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>250</td>\n","      <td>0.0</td>\n","      <td>21.0</td>\n","      <td>3</td>\n","      <td>60</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>39.106174</td>\n","      <td>146.666667</td>\n","      <td>General Mills</td>\n","    </tr>\n","    <tr>\n","      <th>Trix</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>140</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>12</td>\n","      <td>25</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>27.753301</td>\n","      <td>110.000000</td>\n","      <td>General Mills</td>\n","    </tr>\n","    <tr>\n","      <th>Wheat Chex</th>\n","      <td>R</td>\n","      <td>C</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>230</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3</td>\n","      <td>115</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.67</td>\n","      <td>49.787445</td>\n","      <td>149.253731</td>\n","      <td>Ralston Purina</td>\n","    </tr>\n","    <tr>\n","      <th>Wheaties</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3</td>\n","      <td>110</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>51.592193</td>\n","      <td>100.000000</td>\n","      <td>General Mills</td>\n","    </tr>\n","    <tr>\n","      <th>Wheaties Honey Gold</th>\n","      <td>G</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>16.0</td>\n","      <td>8</td>\n","      <td>60</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>36.187559</td>\n","      <td>146.666667</td>\n","      <td>General Mills</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>77 rows × 16 columns</p>\n","</div>"],"text/plain":["                          mfr type  ...  calories_per_cup  full_mfr_names\n","name                                ...                                  \n","100% Bran                   N    C  ...        212.121212         Nabisco\n","100% Natural Bran           Q    C  ...        120.000000     Quaker Oats\n","All-Bran                    K    C  ...        212.121212         Kellogs\n","All-Bran with Extra Fiber   K    C  ...        100.000000         Kellogs\n","Almond Delight              R    C  ...        146.666667  Ralston Purina\n","...                        ..  ...  ...               ...             ...\n","Triples                     G    C  ...        146.666667   General Mills\n","Trix                        G    C  ...        110.000000   General Mills\n","Wheat Chex                  R    C  ...        149.253731  Ralston Purina\n","Wheaties                    G    C  ...        100.000000   General Mills\n","Wheaties Honey Gold         G    C  ...        146.666667   General Mills\n","\n","[77 rows x 16 columns]"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tOcmlLzvmHYM","executionInfo":{"status":"ok","timestamp":1630860214116,"user_tz":420,"elapsed":191,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"217f8970-52e0-45b4-df04-fb7243ca0534"},"source":["# We can update a specific Series within the dataframe like this\n","cereal.mfr = cereal.mfr.replace(replacements)\n","\n","# Confirm the change was successful\n","cereal.head()\n","\n","cereal.mfr.value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Kellogs                        23\n","General Mills                  22\n","Post                            9\n","Quaker Oats                     8\n","Ralston Purina                  8\n","Nabisco                         6\n","American Home Food Products     1\n","Name: mfr, dtype: int64"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"PX53nbHa3a_m"},"source":["### Removing Duplicates"]},{"cell_type":"code","metadata":{"id":"uuXwvprc3gSL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630860329393,"user_tz":420,"elapsed":156,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"9f1e121e-354d-4871-abd0-fe3e02fddb38"},"source":["# The cereals dataset does not have any duplicates, so let's\n","# concatenate the dataset to itself to demonstrate how we can remove\n","# duplicates\n","\n","cereal_duplicated = pd.concat([cereal,cereal],axis=0)\n","print(cereal_duplicated.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(154, 16)\n"]}]},{"cell_type":"code","metadata":{"id":"pveDTy8K49of"},"source":["cereal_deduplicated = cereal_duplicated.drop_duplicates()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QyqkwzalYI6B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630860315831,"user_tz":420,"elapsed":138,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"843138b1-af79-4a75-b22f-465dc714d63a"},"source":["cereal_deduplicated.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(77, 16)"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"ZZFPu4pQ-YAt"},"source":["### Handling missing values\n","\n","Data may come with values missing.  How you handle these missing values will depend on your analysis and what you are trying to do.  \n","\n","For example, one use case may be that you have a numeric column that is a count of something.  If data is missing in this column, we want to make the assumption that that count is 0.  \n","\n","To easily replace missing values in a dataframe, you can use the `.fillna(replacement_value)` method. Here, `replacement_value` is the value that you want to replace your missing values with (e.g. 0 in the example above)"]},{"cell_type":"code","metadata":{"id":"xoXJyBxc3IA6"},"source":["cereal.calories.fillna(0, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d6r0oHD63P2Q","colab":{"base_uri":"https://localhost:8080/","height":454},"executionInfo":{"status":"ok","timestamp":1630860544870,"user_tz":420,"elapsed":222,"user":{"displayName":"Kenneth Simonds","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13793884203152248977"}},"outputId":"ddf84b96-5b14-4d2b-ec5a-3e6180c1eb6c"},"source":["cereal"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mfr</th>\n","      <th>type</th>\n","      <th>calories</th>\n","      <th>protein</th>\n","      <th>fat</th>\n","      <th>sodium</th>\n","      <th>fiber</th>\n","      <th>carbo</th>\n","      <th>sugars</th>\n","      <th>potass</th>\n","      <th>vitamins</th>\n","      <th>weight</th>\n","      <th>cups</th>\n","      <th>rating</th>\n","      <th>calories_per_cup</th>\n","      <th>full_mfr_names</th>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>100% Bran</th>\n","      <td>Nabisco</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>130</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>6</td>\n","      <td>280</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>68.402973</td>\n","      <td>212.121212</td>\n","      <td>Nabisco</td>\n","    </tr>\n","    <tr>\n","      <th>100% Natural Bran</th>\n","      <td>Quaker Oats</td>\n","      <td>C</td>\n","      <td>120</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>2.0</td>\n","      <td>8.0</td>\n","      <td>8</td>\n","      <td>135</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>33.983679</td>\n","      <td>120.000000</td>\n","      <td>Quaker Oats</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran</th>\n","      <td>Kellogs</td>\n","      <td>C</td>\n","      <td>70</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>260</td>\n","      <td>9.0</td>\n","      <td>7.0</td>\n","      <td>5</td>\n","      <td>320</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.33</td>\n","      <td>59.425505</td>\n","      <td>212.121212</td>\n","      <td>Kellogs</td>\n","    </tr>\n","    <tr>\n","      <th>All-Bran with Extra Fiber</th>\n","      <td>Kellogs</td>\n","      <td>C</td>\n","      <td>50</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>14.0</td>\n","      <td>8.0</td>\n","      <td>0</td>\n","      <td>330</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.50</td>\n","      <td>93.704912</td>\n","      <td>100.000000</td>\n","      <td>Kellogs</td>\n","    </tr>\n","    <tr>\n","      <th>Almond Delight</th>\n","      <td>Ralston Purina</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>14.0</td>\n","      <td>8</td>\n","      <td>-1</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>34.384843</td>\n","      <td>146.666667</td>\n","      <td>Ralston Purina</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Triples</th>\n","      <td>General Mills</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>250</td>\n","      <td>0.0</td>\n","      <td>21.0</td>\n","      <td>3</td>\n","      <td>60</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>39.106174</td>\n","      <td>146.666667</td>\n","      <td>General Mills</td>\n","    </tr>\n","    <tr>\n","      <th>Trix</th>\n","      <td>General Mills</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>140</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>12</td>\n","      <td>25</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>27.753301</td>\n","      <td>110.000000</td>\n","      <td>General Mills</td>\n","    </tr>\n","    <tr>\n","      <th>Wheat Chex</th>\n","      <td>Ralston Purina</td>\n","      <td>C</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>230</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3</td>\n","      <td>115</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.67</td>\n","      <td>49.787445</td>\n","      <td>149.253731</td>\n","      <td>Ralston Purina</td>\n","    </tr>\n","    <tr>\n","      <th>Wheaties</th>\n","      <td>General Mills</td>\n","      <td>C</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>3.0</td>\n","      <td>17.0</td>\n","      <td>3</td>\n","      <td>110</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>1.00</td>\n","      <td>51.592193</td>\n","      <td>100.000000</td>\n","      <td>General Mills</td>\n","    </tr>\n","    <tr>\n","      <th>Wheaties Honey Gold</th>\n","      <td>General Mills</td>\n","      <td>C</td>\n","      <td>110</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>1.0</td>\n","      <td>16.0</td>\n","      <td>8</td>\n","      <td>60</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>0.75</td>\n","      <td>36.187559</td>\n","      <td>146.666667</td>\n","      <td>General Mills</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>77 rows × 16 columns</p>\n","</div>"],"text/plain":["                                      mfr  ...  full_mfr_names\n","name                                       ...                \n","100% Bran                         Nabisco  ...         Nabisco\n","100% Natural Bran             Quaker Oats  ...     Quaker Oats\n","All-Bran                          Kellogs  ...         Kellogs\n","All-Bran with Extra Fiber         Kellogs  ...         Kellogs\n","Almond Delight             Ralston Purina  ...  Ralston Purina\n","...                                   ...  ...             ...\n","Triples                     General Mills  ...   General Mills\n","Trix                        General Mills  ...   General Mills\n","Wheat Chex                 Ralston Purina  ...  Ralston Purina\n","Wheaties                    General Mills  ...   General Mills\n","Wheaties Honey Gold         General Mills  ...   General Mills\n","\n","[77 rows x 16 columns]"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"pUVvQh6L3Qm2"},"source":[""],"execution_count":null,"outputs":[]}]}