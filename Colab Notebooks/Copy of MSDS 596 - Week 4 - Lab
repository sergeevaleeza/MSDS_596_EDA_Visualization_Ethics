{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of MSDS 596 - Week 4 - Lab","provenance":[{"file_id":"1cH4D5biFQ2A-156A0fNQGXcBRuR6JImz","timestamp":1631675697114}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"g8Hf3j18KEZ3"},"source":["# Lab Overview\n","\n","**Remember to create a copy of this notebook for your own purposes so that any work that you do is saved to your personal copy of this lab**\n","\n","In this lab, we'll be loading in the baby names dataset and doing some more analysis on it. \n","\n","This dataset comes from the United States Social Security Administration.  It has the frequency of baby names by birth year and gender between the years of 1880 - 2014.  \n","\n","See Kaggle page for more info: https://www.kaggle.com/kaggle/us-baby-names/home?select=NationalNames.csv \n","\n","You can download the CSV directly from the Kaggle link above (choose `NationalNames.csv`).  The file is also available in the Canvas Module for **Pandas** under the name `NationalNames.csv`\n","\n","Load this data into `pandas` and use `index_col='Id'`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TBMy4gYBdGkt","executionInfo":{"status":"ok","timestamp":1631675804608,"user_tz":420,"elapsed":24296,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"8094bc81-88ae-4e0e-f31f-66b85f519e08"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"7pItSCyakZeI","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"ok","timestamp":1631676011603,"user_tz":420,"elapsed":1143,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"349ab7a0-1ef6-4168-c35a-fa651db107f3"},"source":["# Import pandas and load the dataset\n","import pandas as pd\n","\n","names_db = pd.read_csv('/content/drive/MyDrive/2021_Fall_USF_PMS_Biotechnology/MSDS_596/data/NationalNames.csv', index_col=\"Id\")\n","\n","names_db.head()\n"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/lib/arraysetops.py:580: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n","  mask |= (ar1 == a)\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Year</th>\n","      <th>Gender</th>\n","      <th>Count</th>\n","    </tr>\n","    <tr>\n","      <th>Id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>Mary</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>7065</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Anna</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>2604</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Emma</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Elizabeth</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>1939</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Minnie</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>1746</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Name  Year Gender  Count\n","Id                               \n","1        Mary  1880      F   7065\n","2        Anna  1880      F   2604\n","3        Emma  1880      F   2003\n","4   Elizabeth  1880      F   1939\n","5      Minnie  1880      F   1746"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"45sx7OI3ih3m"},"source":["### Question #1\n","\n","What are the top 3 most frequently used first letters for boys vs girls (all time)?\n","\n","Suggested process:\n","1. Create a new column that is the first letter of each name. (Hint: Write a function to return the first letter of the name and use `.transform()` to create the new column)\n","2. Group by this new column and gender, then sum the count of names \n","3. Save the result of 2 to a new dataframe\n","4. Use conditional selection to show the top 3 boys vs girls first letters\n","5. (Challenge) Use `seaborn` and `barplot` to chart the relative frequency of first letters, split by gender\n","\n"]},{"cell_type":"code","metadata":{"id":"9Lr-pUEZERDo","executionInfo":{"status":"ok","timestamp":1631676335987,"user_tz":420,"elapsed":91,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}}},"source":["# Write your code below\n","# Function to return the first letter of the name\n","def return_first_letter_of_name(name):\n","  name_str = str(name)\n","  return name_str[0]\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":233},"id":"N7ft-3-tev2K","executionInfo":{"status":"ok","timestamp":1631676349720,"user_tz":420,"elapsed":687,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"5773da0b-9512-4227-8917-7aa914a2b952"},"source":["# 1. create new column that is the first letter of each name\n","names_db['First_Letter'] = names_db.Name.transform(return_first_letter_of_name)\n","names_db.head()\n"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Year</th>\n","      <th>Gender</th>\n","      <th>Count</th>\n","      <th>First_Letter</th>\n","    </tr>\n","    <tr>\n","      <th>Id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>Mary</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>7065</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Anna</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>2604</td>\n","      <td>A</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Emma</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>2003</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Elizabeth</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>1939</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Minnie</td>\n","      <td>1880</td>\n","      <td>F</td>\n","      <td>1746</td>\n","      <td>M</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Name  Year Gender  Count First_Letter\n","Id                                            \n","1        Mary  1880      F   7065            M\n","2        Anna  1880      F   2604            A\n","3        Emma  1880      F   2003            E\n","4   Elizabeth  1880      F   1939            E\n","5      Minnie  1880      F   1746            M"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":848},"id":"gsPuuljffZzw","executionInfo":{"status":"ok","timestamp":1631676518562,"user_tz":420,"elapsed":239,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"3684a243-8637-4a46-ae1d-ac7d8f434c1a"},"source":["# 2. Group by this new column and gender, then sum the count of names\n","# 3. Save the result of 2 to a new dataframe\n","name_groups = names_db.groupby(by=['First_Letter'], as_index=False)['Count'].sum()\n","name_groups"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>First_Letter</th>\n","      <th>Count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>27308805</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>16198757</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>24779742</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>23801401</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>E</td>\n","      <td>16248524</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>F</td>\n","      <td>5057044</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>G</td>\n","      <td>10448713</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>H</td>\n","      <td>7948419</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>I</td>\n","      <td>3154699</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>J</td>\n","      <td>43578244</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>K</td>\n","      <td>16396504</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>L</td>\n","      <td>18205788</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>M</td>\n","      <td>31968148</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>N</td>\n","      <td>7434205</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>O</td>\n","      <td>1942209</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>P</td>\n","      <td>9062678</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>Q</td>\n","      <td>243155</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>R</td>\n","      <td>23237528</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>S</td>\n","      <td>20758307</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>T</td>\n","      <td>14054925</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>U</td>\n","      <td>138212</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>V</td>\n","      <td>4635528</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>W</td>\n","      <td>8202492</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>X</td>\n","      <td>202914</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>Y</td>\n","      <td>785463</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>Z</td>\n","      <td>1343022</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   First_Letter     Count\n","0             A  27308805\n","1             B  16198757\n","2             C  24779742\n","3             D  23801401\n","4             E  16248524\n","5             F   5057044\n","6             G  10448713\n","7             H   7948419\n","8             I   3154699\n","9             J  43578244\n","10            K  16396504\n","11            L  18205788\n","12            M  31968148\n","13            N   7434205\n","14            O   1942209\n","15            P   9062678\n","16            Q    243155\n","17            R  23237528\n","18            S  20758307\n","19            T  14054925\n","20            U    138212\n","21            V   4635528\n","22            W   8202492\n","23            X    202914\n","24            Y    785463\n","25            Z   1343022"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FB5aq_qHf6ur","executionInfo":{"status":"ok","timestamp":1631678223866,"user_tz":420,"elapsed":369,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"44d994ce-bc35-422b-ac7f-ccd08bc51e30"},"source":["# 4. Use conditional selection to show the top 3 boys vs girls first letters\n","m_f_topnames = names_db.groupby(by=[\"First_Letter\",\"Gender\"])[\"Count\"].sum()\n","six_top_letters = m_f_topnames.nlargest(6)\n","six_top_letters"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["First_Letter  Gender\n","J             M         28872890\n","M             F         19524888\n","R             M         16159830\n","A             F         16086865\n","J             F         14705354\n","D             M         14161260\n","Name: Count, dtype: int64"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":195},"id":"q9h5pTtUtQEM","executionInfo":{"status":"error","timestamp":1631680104956,"user_tz":420,"elapsed":90,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"d0d60953-d59d-4f07-f453-f4107054f872"},"source":["first_letter_freq = names_db.groupby(by=[\"Gender\", 'First_Letter'], as_index=False)[\"Count\".sum()\n","]"],"execution_count":63,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-da5a774da559>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m first_letter_freq = names_db.groupby(by=[\"Gender\", 'First_Letter'], as_index=False)[\"Count\".sum()\n\u001b[0m\u001b[1;32m      2\u001b[0m ]\n","\u001b[0;31mAttributeError\u001b[0m: 'str' object has no attribute 'sum'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"T532iIAQijRn","executionInfo":{"status":"ok","timestamp":1631678405247,"user_tz":420,"elapsed":25053,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"6fb830fb-c3f2-408a-c15f-d20edb4af070"},"source":["# 5. (Challenge) Use seaborn and barplot to chart the relative frequency of \n","# first letters, split by gender\n","import seaborn as sns\n","sns.set_theme(style=\"whitegrid\")\n","\n","# x = the series to use for the x-axis\n","# y = the series to use for the y-axis\n","# hue = option to add multiple series separated by color\n","ax = sns.barplot(x=\"First_Letter\", y=\"Count\", hue='Gender', data=names_db)\n"],"execution_count":62,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Lv0E2yRtlSVO"},"source":["###Question #2\n","\n","How has the average name length changed over time?  Is this different for boys vs girls?\n","\n","Suggested process:\n","1. Create a new column that is the length of each name (Hint: Write a function that uses `len()` to return the length of the name and use `.transform()` on the dataframe to create the column)\n","2. Group by year and calculate the mean of the length column\n","3. Save 2 to a new dataframe and sort it by year.  \n","4. Using the original dataframe, now group by year and gender and then calculate the mean of the length column\n","5. Save 4 to a new dataframe and sort it by year.\n","6. (Challenge) Use `seaborn` to plot a line chart of the average name length over time."]},{"cell_type":"code","metadata":{"id":"EuWBDFQPEW7d","executionInfo":{"status":"ok","timestamp":1631680177287,"user_tz":420,"elapsed":90,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}}},"source":["# Write your code below\n","def get_name_length(name):\n","  return len(name)"],"execution_count":64,"outputs":[]},{"cell_type":"code","metadata":{"id":"6E24Gpm-EYC2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631680186137,"user_tz":420,"elapsed":108,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13911837901844970628"}},"outputId":"d11d89f0-2d6e-4f05-eabc-8b37bb415df6"},"source":["get_name_length(\"Bob\")"],"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"uaIhw4sHt9DD"},"source":["names_db[\"Name_Length\"] = "],"execution_count":null,"outputs":[]}]}