{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of MSDS 596 - Week 5 - Lecture Notes","provenance":[{"file_id":"1kQMdGuvJkc0AHkXgTo2FrQAtHHPvTB-N","timestamp":1633413291331},{"file_id":"1noMWWK4R6jEX44KOUIlYcq7kwW3cCsid","timestamp":1631984734218},{"file_id":"1vcKeJUV5gr_-01KR_AcdBGqICB8t3NwV","timestamp":1599932926774},{"file_id":"10i9YKtDNEVXJZu4_NnVq36oFS4rp1_hP","timestamp":1599290591119}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"qCIYgi_55nl8"},"source":["# Data Visualization\n","\n","Data visualization is a common technique used in exploratory data analysis to more easily see trends, patterns, and other relationships in the data.  Done properly, a single visual can convey much more information much more efficiently than the equivalent block of text and numbers.\n","\n","There are a number of different data visualization libraries available in Python.  In this course, we will focus on using [`seaborn`](https://seaborn.pydata.org/index.html), which is based on `matplotlib`.  For context, [`matplotlib`](https://matplotlib.org/index.html) is a full-fledged data visualization library that provides functionality for \"creating static, animated, and interactive visualizations in Python\".  `seaborn` is built on top of `matplotlib`, so under the hood, the graphics and plots are created using `matplotlib`, but a lot of the code that would normally be used to create attractive visualizations in `matplotlib` is abstracted out for you in `seaborn`, allowing you to quickly and more efficiently create good looking visualizations right out of the gate.  In addition, `seaborn` has strong integration with `pandas` dataframes, making it seamless to move from dataframe to visualization.\n","\n","[`seaborn` documentation](https://seaborn.pydata.org/tutorial/relational.html)"]},{"cell_type":"markdown","metadata":{"id":"iUm1o2aLjBfR"},"source":["## Setting up\n","\n"]},{"cell_type":"code","metadata":{"id":"laRi8PKijrON"},"source":["# importing the seaborn library\n","# sns is the convention short-hand of the library\n","# also import pandas and matplot lib\n","import seaborn as sns\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# set the default theme, which sets default values\n","# for different figure aesthetics like background color\n","# axes, size etc.\n","# https://seaborn.pydata.org/generated/seaborn.set_theme.html#seaborn.set_theme\n","sns.set_theme()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JWtTeqkONRAp"},"source":["## Load Data"]},{"cell_type":"code","metadata":{"id":"vyiuvtrsnhIs"},"source":["# load data\n","olympics = pd.read_csv(\"/content/drive/MyDrive/MSDS 596 - Fall 2021/Data/athlete_events.csv\")\n","\n","# We will create different data sets from this dataframe for visualization"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y1IfflE6NVmP"},"source":["# Common Plots\n","\n","Let's cover some of the more common plots, how to interpret them, and in what situations they are the most useful."]},{"cell_type":"markdown","metadata":{"id":"5029ymo5Nrbg"},"source":["## Scatter Plots\n","\n","Scatter plots depict the joint distribution of two variables. Every data point in the data set is represented by a dot on the scatter plot.  This type of visualization is useful for visualizing the **relationship** between two variables and their **distribution**.  You can also quickly identify outliers in this type of visualization."]},{"cell_type":"code","metadata":{"id":"lCHOnKZDAipY"},"source":["# Make a new dataframe that consists of unique medalists who have a height and weight value\n","unique_medalists_complete = olympics.dropna().loc[:,[\"Name\",\"NOC\",\"Height\",\"Weight\",\"Sex\"]].drop_duplicates()\n","unique_medalists_complete = unique_medalists_complete[unique_medalists_complete.NOC.isin([\"USA\",\"CHN\",\"JPN\"])]\n","unique_medalists_complete.head(5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-8bc1FO-oPeW"},"source":["# relplot returns a FacetGrid\n","sns.relplot(kind=\"scatter\", x=\"Height\", y=\"Weight\", row=\"NOC\", col=\"Sex\", data=unique_medalists_complete)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rB21d2n8VyZo"},"source":["## Line Plots\n","\n","Line plots are useful for visualizing the change in value of a variable against a continuous variable, like time.  \n"]},{"cell_type":"code","metadata":{"id":"-eJU3SHb49mL"},"source":["# Let's chart US vs China vs Russia medals since 1996\n","\n","# Filter and clean\n","is_medalist = olympics.Medal.isin([\"Gold\",\"Silver\",\"Bronze\"])\n","is_country_of_interest = olympics.NOC.isin([\"USA\",\"CHN\",\"RUS\"])\n","after_1996 = olympics.Year >= 1996\n","medalists_after_1996 = olympics[is_medalist & is_country_of_interest & after_1996].copy()\n","medalists_after_1996.Year = medalists_after_1996.Year.astype(str)\n","\n","# Aggregate\n","by_noc_year_season = medalists_after_1996.groupby(by=[\"NOC\",\"Year\",\"Season\"], as_index=False)[\"Medal\"].count()\n","by_noc_year_season.sort_values(by=[\"Year\", \"NOC\", \"Season\"])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X7s7oNEzXe7v"},"source":["sns.relplot(kind=\"line\", x=\"Year\", y=\"Medal\", hue=\"NOC\", col=\"Season\", data=by_noc_year_season)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5x5nsxHKhxpy"},"source":["## Histograms\n","\n","Histograms help visualize **distributions** of a single variable.  "]},{"cell_type":"code","metadata":{"id":"nufQJ5S3Y32T"},"source":["# Let's see the age distribution of athletes\n","\n","athletes_with_age = olympics.loc[:,[\"Name\",\"Age\",\"Height\",\"Weight\",\"Sex\"]].dropna().drop_duplicates()\n","athletes_with_age.Age = athletes_with_age.Age.astype(int)\n","athletes_with_age.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dig4KJw9nUjk"},"source":["# Adding a hue plots multiple distributions\n","# Can also use bins=N to specify the number of bins you want to bucket the data into\n","sns.displot(kind='hist', data=athletes_with_age, x=\"Age\", discrete=True, hue=\"Sex\", kde=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Bo95-jfDKynf"},"source":["## Box Plots\n","\n","A box plot helps to visually understand the **distribution** of a variable across categories. The box plot shows the three quartile values (P25, P50, P75) and then has \"whiskers\" which extend past the main box to an upper bound and a lower bound that represent 1.5 times the IQR (interquartile range, or P75 - P25). Any points above or below the whiskers are considered outliers and are plotted individually."]},{"cell_type":"code","metadata":{"id":"ki-ajbBnCGQx"},"source":["olympics.Sport.unique()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hnx0TXyNLpTz"},"source":["# Let's look at the height distribution across a few select sports\n","\n","olympics.Sport.unique()  # List the different Sports available\n","# Pick a handful of sports\n","sports = [\"Basketball\", \"Gymnastics\", \"Weightlifting\", \"Figure Skating\"]\n","# Filter data frame to sports of interest and drop the rows where we have no height\n","athletes = olympics.loc[:,[\"Name\",\"Age\",\"Height\",\"Weight\",\"Sex\",\"Sport\"]].dropna().drop_duplicates()\n","heights = athletes[athletes.Sport.isin(sports)].copy()\n","heights.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"w5Q0XdWRP_a9"},"source":["sns.catplot(kind=\"box\", data=heights, x=\"Sport\", y=\"Height\", hue=\"Sex\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MhWjjwuPa2GS"},"source":["## Point Plots\n","\n","Point plots also visualize **distributions** of variables across a category, but the emphasis in this plot is on how the relationship changes. Each individual point represents the mean, by default, with a 95% confidence interval, and the points are split across a categorical variable to help visualize change.\n","\n","[Documentation](https://seaborn.pydata.org/tutorial/categorical.html#point-plots)"]},{"cell_type":"code","metadata":{"id":"D3ouPujAFUOu"},"source":["# How has the distribution of swimmer's heights changed over time?\n","swimmers_by_year = olympics[(olympics.Sport.str.contains(\"Swimming\")) & (olympics.Year >= 1964)].loc[:,[\"Year\",\"Name\",\"NOC\",\"Age\",\"Height\",\"Weight\",\"Sex\",\"Sport\"]].dropna().drop_duplicates()\n","swimmers_by_year.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SSS2K2r-SJlc"},"source":["sns.catplot(kind=\"point\", data=swimmers_by_year, x=\"Year\", y=\"Height\", hue=\"Sex\", col=\"Sport\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"otvOfMc25MhZ"},"source":["## Heatmap\n","\n","Heatmaps show the magnitude of a **relationship** between two variables via varying intensities of color.  They are useful for quickly drawing attention to patterns and relationships in the data using color as a pre-attentive attribute.\n","\n","[Heatmap documentation](https://seaborn.pydata.org/generated/seaborn.heatmap.html)"]},{"cell_type":"code","metadata":{"id":"33kdXFNynVZv"},"source":["# Heatmap data needs to be prepared as 2D data with index, columns, and values\n","# Let's look at Winter Olympic performance by country\n","\n","# Set filters\n","has_medal = olympics.Medal.isin([\"Gold\",\"Silver\",\"Bronze\"])\n","is_winter = olympics.Season == \"Winter\"\n","winter_medals = olympics[has_medal & is_winter].copy()\n","# Group by country and sport and count the medals\n","winter_medals_summary = winter_medals.groupby(by=[\"NOC\",\"Sport\"], as_index=False)[\"Medal\"].count()\n","# winter_medals_summary.head(5)\n","# Pivot the data so that NOC is the row index, Sport is the column index, and \n","# the count of medals is the values\n","# winter_medals_summary.head(5)\n","winter_medals_pivoted = winter_medals_summary.pivot(\"NOC\",\"Sport\",\"Medal\")\n","winter_medals_pivoted.head()\n","# Fill NaN with 0\n","winter_medals_pivoted.fillna(0, inplace=True)\n","winter_medals_pivoted.head()\n","# Add a Total column that has the total medals won by country\n","# This will be used to take the top X countries (to limit the dataset for visualization)\n","winter_medals_pivoted['Total'] = winter_medals_pivoted.sum(axis=1)\n","winter_medals_pivoted.head()\n","# Sort by the new Total column\n","winter_medals_pivoted.sort_values(by=\"Total\", ascending=False, inplace=True)\n","winter_medals_pivoted.head()\n","# # print(winter_medals_pivoted.head())\n","# Normalize the data by converting it to % of medals won\n","winter_medals_pivoted = winter_medals_pivoted*100 / winter_medals_pivoted.sum(axis=0)\n","winter_medals_pivoted.head()\n","# Take the top 10 countries (remember we sorted by Total medal count above)\n","# Then drop the Total column since we don't want it in the viz\n","winter_medals_final = winter_medals_pivoted[:10].drop(columns=[\"Total\"])\n","winter_medals_final.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZPVUbTukJd79"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ucQEhYhkMUjc"},"source":["f, ax = plt.subplots(figsize=(15,6)) # increasing the figure size for visibility\n","sns.heatmap(data=winter_medals_final, cmap=\"YlGnBu\", annot=True, ax=ax)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0aTsoozuPjkH"},"source":[""],"execution_count":null,"outputs":[]}]}