{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of MSDS 596 - Week 1 - Lecture Notes - Python Fundamentals 1","provenance":[{"file_id":"1vWL1RW_a7AIiprCDnMlj2ifnDDtvk9rN","timestamp":1629857208632},{"file_id":"1h8Ls3vPWt3-DM_cqMo9z1ROTHuoBtdwC","timestamp":1598142323209}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"69AWPcrCHm00"},"source":["# **Python Fundamentals 1**\n","**What is Python?**\n","\n","Per [wikipedia](https://en.wikipedia.org/wiki/Python_(programming_language))\n","\n","> Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\n","\n","**Why learn it?**\n","\n","Python has a wide range of use cases to include **data analytics**. As analytics and data science have become more prominent in the past decade, it has quickly become an industry standard. The tools we will be using in this class are all built off of Python.  \n","\n","**What do I need to know before we start?**\n","\n","Python's syntax is **indentation-based**.  This means that white space matters when you are writing Python code.  As a result, Python code becomes formatted neatly and is easier to read.  Don't worry if this doesn't mean anything to you right now, we will get into this shortly.  "]},{"cell_type":"markdown","metadata":{"id":"DT6LqbsRsIyH"},"source":["\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"OydOcy6ruVEb"},"source":["# **Comments**\n","\n","Comments are lines of text that are added to code to help explain the code to readers.  Comments are ignored by the interpreter when the code is run.  It is solely for the benefit of the human author and reader of the code.\n","\n","In Python, comments are written by starting a line with the # symbol."]},{"cell_type":"code","metadata":{"id":"OJ5unGWTvf-9"},"source":["# This is an example of a comment\n","# Google Colab will use the color green for comments"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WKzjGRD6LYTp"},"source":["# **Variables and Data Types**\n","\n","Variables are containers for storing values.  \n","You assign values to variables by using ="]},{"cell_type":"code","metadata":{"id":"xN0AHVVyLANx"},"source":["x = 3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1SCHluo9Mbo8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629858136600,"user_tz":420,"elapsed":4,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"ae86e83c-4103-4282-f279-5618c645ef95"},"source":["print(x)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lUMLH4QSMoPv"},"source":["You can overwrite the value of an existing variable by assigning a new value to it in the same way."]},{"cell_type":"code","metadata":{"id":"MLKNv_d7MgVg"},"source":["x = 5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n8MlfcHkMipw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629858139623,"user_tz":420,"elapsed":176,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"b3a9de8f-2cf0-44a7-c0c2-abf8597989b0"},"source":["print(x)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RGyUhat2N0AD"},"source":["There are many different types of values that can be stored in variables.  \n","Common scalar data types include:\n","* Integer\n","* Float\n","* String\n","* Boolean \n","* Tuple\n","* List\n","* Set\n","* Dictionary \n","\n"]},{"cell_type":"markdown","metadata":{"id":"msdXmKG-s_n9"},"source":["## Integers and Floats\n","`int` and `float` respectively are types of numeric values.\n","\n"]},{"cell_type":"code","metadata":{"id":"nIxILeeEMjfx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629858142292,"user_tz":420,"elapsed":133,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"12f09d35-4c39-4190-d5f6-2a41db4a1448"},"source":["# Integers and Floats\n","radius = 2  # This is an integer\n","pi = 3.14   # This is a float\n","\n","# You can mix integers and floats in calculations\n","area_of_circle = pi * radius * radius\n","print(area_of_circle)\n","type(area_of_circle)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["12.56\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["float"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"wHpVYHhDtUW0"},"source":["## Strings\n","`str` are \"strings\" of text characters"]},{"cell_type":"code","metadata":{"id":"06VOn88HPFJ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629858182915,"user_tz":420,"elapsed":113,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"684fffae-69f2-4a25-dd56-77c711fc8e41"},"source":["# String\n","# A string of text wrapped in single, double, or triple quotes\n","\n","hello = 'Hello' # Single Quotes\n","world = \"World\"  # Double Quotes\n","# Triple Quotes for multi-line strings \n","preamble = \"\"\"\n","We the People of the United States, \n","in Order to form a more perfect Union, \n","establish Justice, ensure domestic Tranquility, \n","provide for the common defence, \n","promote the general Welfare, \n","and secure the Blessings of Liberty to ourselves and our Posterity, \n","do ordain and establish this Constitution for the United States of America.\n","\"\"\"\n","print(preamble)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","We the People of the United States, \n","in Order to form a more perfect Union, \n","establish Justice, ensure domestic Tranquility, \n","provide for the common defence, \n","promote the general Welfare, \n","and secure the Blessings of Liberty to ourselves and our Posterity, \n","do ordain and establish this Constitution for the United States of America.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jkSzpgVCALnX"},"source":["## String concatenation\n","Strings can be \"added\" i.e. concatenated together with other strings"]},{"cell_type":"code","metadata":{"id":"eVEC2TdGAcwI"},"source":["greeting = hello + ' ' + world\n","print(greeting)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"guCMoCjtAm3w"},"source":["However, strings cannot be concatenated to non-strings"]},{"cell_type":"code","metadata":{"id":"t14m4wYNSbnL"},"source":["love_amount = 3000  # int\n","i_love_python = \"I love Python \" # str\n","# print(i_love_python + love_amount) # error\n","\n","love_amount = str(love_amount)\n","print(type(a))\n","print(type(love_amount))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uNIvfLx5Aw3P"},"source":["But, we can cast (i.e. convert) variables from one type to another by wrapping the variable name in str() or int() or float() etc."]},{"cell_type":"code","metadata":{"id":"dPDLAExWTTv7"},"source":["love_amount_str = str(love_amount)  # Casts from int to str\n","print(i_love_python + love_amount_str)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cNl32h7TBcgG"},"source":["## Boolean\n","`bool` is a true or false value"]},{"cell_type":"code","metadata":{"id":"Jjlp-ZBjQT4Q"},"source":["t = True\n","f = False\n","\n","# We can combine boolean values (or expressions that evaluate to boolean values)\n","# using logical operators (e.g. and, or, not)\n","\n","print(\"True and False: \", t and f)\n","print(\"True or False: \", t or f)\n","print(\"Not False: \", not f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XowKlytpBsMJ"},"source":["## Lists\n","`list` are a data structure consisting of a list of ordered, comma-separated values contained within brackets.\n","They can contain different data types."]},{"cell_type":"code","metadata":{"id":"qBEcX3CUD4yG"},"source":["my_empty_list = []\n","my_list = [1,2,3,4,5,6,7,8,9]\n","my_str_list = [\"a\",\"b\",\"c\"]\n","my_mixed_list = [\"a\", 1, 2.5, True]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mmQRD5VlCwdF"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uaJNOt3pB-Ug"},"source":["Lists are helpful to organize data and process them in order.\n","\n","Data in a list can be accessed using the index (i.e. order number) of the desired element in the list. \n","\n","*   The first element in the list has an index of 0\n","*   The last element in the list has an index of -1\n","*   A \"slice\" of the list can be grabbed by specifying the first (inclusive) and last (exclusive) indices\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"0ou165qfEoP6"},"source":["my_list[0] # the first element of the list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9ifMrGPoEvY8"},"source":["my_str_list[2] # the third element of the list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZE3mhqmHE2ms"},"source":["my_list[-1] # the last element of the list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b6gVTFQHE-q2"},"source":["my_list[0:3] # a list containing only the first three items of the list"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yZI1FEBZMQca"},"source":["The length of a list can be calculated using `len()`"]},{"cell_type":"code","metadata":{"id":"kvTEPHrKCWK-"},"source":["len(my_list)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mAq1fZ3mMX9P"},"source":["New items can be added to a list by using `append()`\n","\n","Lists can also be added to each other to concatenate them."]},{"cell_type":"code","metadata":{"id":"xJAVVrPQMXLM"},"source":["my_list.append(10)\n","print(my_list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n","\n","# We can also add (concatenate) lists\n","a = [1,2,3]\n","b = [4,5,6]\n","c = a + b\n","print(c) # [1, 2, 3, 4, 5, 6]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mgs2sieYw6JR"},"source":["# Tuple\n","\n","Tuples are fixed-length sequences of Python objects.  The elements in a tuple are comma separated and the tuple is defined using parentheses."]},{"cell_type":"code","metadata":{"id":"FCGXOD-Q8wKV"},"source":["my_tuple = (1,2,3,4)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WTOjPDhaxZtR"},"source":["my_tuple[0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i2UyT9zYxcBB"},"source":["my_tuple[0] = 100  # ERROR - Tuples are immutable"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IK4NhkhRMwSR"},"source":["## Dictionary\n","\n","A **dictionary** is a key/value map.  That is, **keys** can be used to store and look up **values**."]},{"cell_type":"code","metadata":{"id":"6vY1AqGiIudc"},"source":["empty_dictionary = {}\n","student_record = {\n","    \"name\": \"Harry Potter\",\n","    \"school\": \"Hogwarts\",\n","    \"house\": \"Gryffindor\",\n","    \"year\": 1,\n","    \"age\": 11,\n","    \"friends\": [\"Hermione Granger\", \"Ron Weasley\"],\n","    \"speaks_parseltongue\": True\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TL63jlSVMPVX"},"source":["# Values can be accessed using the key name\n","# The key name is wrapped in square brackets or get()\n","print(student_record[\"age\"]) # 11\n","print(student_record.get(\"friends\")) # ['Hermione Granger', 'Ron Weasley']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9YDRBvNqNmrP"},"source":["# New key/value pairs can always be added to the dictionary\n","student_record[\"enemies\"] = [\"Draco Malfoy\"]\n","print(student_record)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7daZ1klPNshf"},"source":["# Existing values can be updated with new values\n","student_record[\"age\"] = 12\n","print(student_record)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pk5L7XyrM9-s"},"source":["# **Python Operators**\n","## Arithmetic Operators\n","**\\+** : Addition\n","\n","**\\-** : Subtraction\n","\n","**\\*** : Multiplication\n","\n","**/** : Division\n","\n","**%** : Modulo\n","\n","****** : Exponent\n","\n","## Comparison Operators\n","**==** : equal to\n","\n","**\\>=** : greater than or equal to\n","\n","**\\>**  : greater than\n","\n","**<=** : less than or equal to\n","\n","**<**  : less than\n","\n","**!=** : not equal to\n","\n","## Assignment Operators\n","\n","**\\=** : Assigns a value to a variable\n","\n","**+=** : Adds the value and assigns it to the variable\n","\n","## Logical Operators\n","x **and** y : True if x and y are both True\n","\n","x **or** y : True if at least one of x or y are True\n","\n","**not** x : True if x is False, False if x is True"]},{"cell_type":"code","metadata":{"id":"LQJ16QwnP7lr"},"source":["5 == 5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J8KWt58BQIUd"},"source":["1 == 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PILau2BwQNQr"},"source":["\"dog\" != \"cat\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qo98Wo3RQXUo"},"source":["1000 > 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HY5Gjrxu7If1"},"source":["7 % 4"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zRHLRQP57Koo"},"source":["2 ** 4"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5c3iHAPeTxkC"},"source":["x = 5\n","x += 2 # equivalent to x = x + 2\n","print(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N36xFSdnT12c"},"source":["university = \"USF\"\n","course = \"MSDS 596\"\n","\n","print(university == \"USF\" and course == \"MSDS 595\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NQmiPmuMQd6m"},"source":["## **If statements**\n","\n","We can add if statements to our code, so that code only runs if a certain condition is met.\n","\n","*Note: This is the first time we're seeing the indentation referenced earlier.  All code to be executed when the `if` condition is met should be at the same level of indentation.*"]},{"cell_type":"code","metadata":{"id":"PCR300VoSYpe"},"source":["# Let's go back to our Harry Potter student record\n","print(student_record)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k0fFDab-Sh1s"},"source":["if student_record[\"school\"] == \"Hogwart\":\n","    print(student_record[\"name\"] + \"'s headmaster is Albus Dumbledore\")\n","    print(\"1\")\n","    print(\"2\")\n","print(\"3\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_FWQzEkyUgpg"},"source":["# Only 3rd years and above are allowed to go to Hogsmeade. \n","# Let's check this and print whether Harry is allowed to go\n","\n","if student_record[\"year\"] >= 3:\n","    print(student_record[\"name\"] + \" is permitted to go to Hogsmeade\")\n","elif student_record[\"year\"] >= 0 and student_record[\"year\"] <= 2:\n","    print(student_record[\"name\"] + \" is NOT permitted to go to Hogsmeade\")\n","else:\n","    print(\"Invalid student year\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N17Z3_HcWu9m"},"source":["## **Loops**\n","\n","Loops allow you to iterate over a block of code.\n","\n","See the different types of loops and use cases below.\n","\n","## **`for` loops**\n","\n","Iterates one item at a time through a sequence of items, allowing you to execute code on each item.  This is useful for processing data records, where you want to act on every record in some pre-determined way.\n"]},{"cell_type":"code","metadata":{"id":"Wbz9z-y6amZA"},"source":["# Let's look at an example of a simple for loop\n","names = [\"Harry\", \"Ron\", \"Hermione\", \"Draco\"]\n","for x in names:\n","    print(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cYh-Rh0dkORl"},"source":["# Here's another example, where we iterate through a list of items, look up its price, and update a running total\n","\n","# total_cost will hold the running total. It is initalized to $0.\n","total_cost = 0\n","# price_catalog is a dictionary mapping items to prices\n","price_catalog = {\n","    \"book\": 20,\n","    \"notebook\": 5,\n","    \"pencil\": 1,\n","    \"eraser\": 0.25\n","}\n","# items_in_cart is a list of items we will be purchasing\n","items_in_cart = [\"book\", \"notebook\", \"notebook\", \"pencil\"]\n","\n","for item in items_in_cart:\n","    print(item + \" costs $\" + str(price_catalog[item]))\n","    total_cost += price_catalog[item] # += means take the current value in the variable and add the new value to it\n","\n","print(\"The total cost is $\" + str(total_cost))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qjhu0avqocuK"},"source":["## **`while` loops**\n","\n","Continue to loop through the code until the provided test expression is no longer true.  Be careful as you can have infinite loops if the test expression never evaluates to false."]},{"cell_type":"code","metadata":{"id":"-UOVDlLXlnQ4"},"source":["# Here is a while loop example\n","\n","num_loops = 3\n","while num_loops > 0:\n","    print(num_loops)\n","    num_loops -= 1 # subtract 1 from num_loops every loop"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hhe4UvtDqWRi"},"source":["## **Functions**\n","\n","A function is a block of code that performs a specific action. Functions generally take an input and return an output.  Using functions is good coding practice, as it allows you to break otherwise large, unwieldy blocks of code into smaller, modular pieces that are easier to read/understand and are also reusable."]},{"cell_type":"code","metadata":{"id":"yS24olqjqCtt"},"source":["# An example of a function\n","# This statement defines the function.\n","# The syntax is def my_function_name(some,input,variables):\n","# A value can be returned using \"return\"\n","def add_two_numbers(a, b):\n","    return a + b\n","\n","# Now that the function is defined, we can call it.\n","print(add_two_numbers(10, 5))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aGCLSubtP1wS"},"source":["# Another example of a function\n","def get_average(list_of_numbers):\n","    list_length = len(list_of_numbers)\n","    total = 0\n","    for number in list_of_numbers:\n","        total += number\n","    return total/list_length\n","\n","some_numbers = [1,2,3,4,5,6]\n","print(get_average(some_numbers))"],"execution_count":null,"outputs":[]}]}