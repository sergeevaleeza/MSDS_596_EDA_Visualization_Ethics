{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of MSDS 596 - Week 2 - Lecture Notes - Python Fundamentals 2","provenance":[{"file_id":"1RfqBG5aY68WWWGFMT8oinW2YEVvvIZ3j","timestamp":1630463463405},{"file_id":"1vWL1RW_a7AIiprCDnMlj2ifnDDtvk9rN","timestamp":1630187837395},{"file_id":"1h8Ls3vPWt3-DM_cqMo9z1ROTHuoBtdwC","timestamp":1598142323209}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"b1U_xAI-xSvr"},"source":["## **Quick Recap**\n","\n","Variables in Python can represent different scalar data types\n","- Integers\n","- Floats\n","- Strings\n","- Booleans\n","- None type\n","\n","These scalar data types can be combined to form more complex data structures, such as\n","- Lists\n","- Tuples\n","- Set\n","- Dictionaries"]},{"cell_type":"code","metadata":{"id":"gU-21N_Vynd4"},"source":["a = 5               # Integer\n","b = 1.2             # Float\n","c = \"Cheeseburger\"  # String\n","d = True            # Boolean\n","e = None            # None type (the absence of a value)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KiXvM0kky-7w"},"source":["f = [1,3,5,7,9]         # List  (mutable, can be changed)\n","g = (2,4,6)             # Tuple (immutable, cannot be changed)\n","h = set([1,1,2,2,3,3])  # Set (will keep only the unique elements 1,2,3)\n","i = {\n","    \"name\": \"Bobby\",\n","    \"age\": 22,\n","    \"is_student\": True\n","}                       # Dictionary (key-value pairs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"li3Y36kg35Zo"},"source":["h"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fNzxcXn20GsO"},"source":["We frequently use Python data structures to perform different types of actions in data analytics.  Common actions involve iterating through elements of a data structure and applying some kind of condition, filter, calculation, transformation, or aggregation to each element of the data structure.\n","\n","To accomplish this, we use `for` loops (or `while` loops) and conditional statements like `if`, `elif`, and `else`."]},{"cell_type":"code","metadata":{"id":"7gYmWBgA0FHP"},"source":["# Example\n","# Given a list of words, let's find the average word length\n","\n","words = [\"apple\", \"ball\", \"cat\", \"dog\", \"elephant\", \"frog\"]\n","total_letters = 0\n","for word in words:\n","    # increment the number of total letters by the number of letters in each word\n","    total_letters += len(word)   \n","\n","# Avg word length is the total number of letters divided by the number of words\n","avg_word_length = total_letters / len(words)\n","\n","print(avg_word_length)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y62KUSsO6EZJ"},"source":["## **List Comprehensions**\n","\n","As it turns out, the concept of looping through a data structure and performing some operation is so common, that Python has simplified the syntax into a feature called a *list comprehension*.  With a list comprehension, you can elegantly perform this operation in a single line of code."]},{"cell_type":"code","metadata":{"id":"fiKkbbwa6wHA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631088132462,"user_tz":420,"elapsed":139,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"b81d9d28-2de6-4ece-eddb-508d0835ec17"},"source":["# Let's go back to an example from Lab 1\n","# Task:  From a list of 50 random numbers, 1-100, find the ones less than 10\n","\n","from random import randint\n","\n","# This code produces the list of 50 random numbers in the range of 1 - 100\n","random_numbers = [randint(1,100) for i in range(50)]\n","print(random_numbers)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 81, 64, 85, 2, 30, 59, 74, 93, 99, 24, 42, 5, 50, 36, 85, 75, 27, 56, 74, 1, 84, 25, 77, 25, 99, 49, 94, 62, 98, 8, 63, 55, 31, 53, 13, 99, 41, 10, 71, 69, 46, 2, 17, 99, 1, 14, 86, 81, 34]\n"]}]},{"cell_type":"code","metadata":{"id":"yZF7xP9V7gHt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631088134504,"user_tz":420,"elapsed":134,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"b8e2adf9-4cc2-4e4f-a54b-4d8d45160264"},"source":["# Original solution\n","single_digit_random_numbers = []\n","for number in random_numbers:\n","    if number < 10:\n","        single_digit_random_numbers.append(number)\n","\n","print(single_digit_random_numbers)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 2, 5, 1, 8, 2, 1]\n"]}]},{"cell_type":"code","metadata":{"id":"KAEyP-1n7xah","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631088137899,"user_tz":420,"elapsed":131,"user":{"displayName":"Elizaveta Sergeeva","photoUrl":"","userId":"13911837901844970628"}},"outputId":"6d129354-1a26-479b-e172-04713c77987d"},"source":["# Using a list comprehension\n","\n","single_digit_random_numbers = [number for number in random_numbers if number < 10]\n","\n","print(single_digit_random_numbers)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 2, 5, 1, 8, 2, 1]\n"]}]},{"cell_type":"markdown","metadata":{"id":"hhe4UvtDqWRi"},"source":["## **Functions**\n","\n","A function is a block of code that performs a specific action. Functions generally take one or more input(s) and return one or more output(s).  Using functions is good coding practice, as it allows you to break otherwise large, unwieldy blocks of code into smaller, modular pieces that are easier to read/understand and are also reusable."]},{"cell_type":"code","metadata":{"id":"yS24olqjqCtt"},"source":["# An example of a function\n","# This statement defines the function.\n","# The syntax is def my_function_name(some,input,variables):\n","# A value can be returned using \"return\"\n","def add_two_numbers(a, b):\n","    sum = a + b\n","    return sum\n","\n","# Now that the function is defined, we can call it.\n","# We can store the result of the function in a new variable\n","sum_of_two_numbers = add_two_numbers(10, 3)\n","\n","print(sum_of_two_numbers)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aGCLSubtP1wS"},"source":["# Another example of a function \n","# This one takes a list as input and returns a float\n","def get_average(list_of_numbers):\n","    list_length = len(list_of_numbers)\n","    total = 0\n","    for number in list_of_numbers:\n","        total += number\n","    return total/list_length\n","\n","some_numbers = [1,2,3,4,5,6]\n","some_more_numbers = [7,8,9,10,11,12]\n","print(get_average(some_numbers))\n","print(get_average(some_more_numbers))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6hAqpFnM3Lf3"},"source":["# Functions can return multiple values\n","def get_next_three_numbers(number):\n","    a = number + 1\n","    b = number + 2\n","    c = number + 3\n","    return (a, b, c)\n","\n","# Although it looks like multiple values, you are actually just returning one tuple\n","# This tuple can be unpacked into separate variables\n","# my_tuple_next_three_numbers = get_next_three_numbers(15)\n","# print(my_tuple_next_three_numbers)\n","x, y, z = get_next_three_numbers(10)\n","print(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iHcUlSOE4Y0A"},"source":["# Functions can also take an unspecified number of inputs by using the * operator\n","# Sometimes you will see this as *args (short for arguments), but the variable\n","# name after the * can be anything, like in the example below\n","def add_numbers(*numbers):\n","    total = 0\n","    # *numbers becomes a list that we can iterate through\n","    for number in numbers:\n","        total += number\n","    return total"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eDwMd8Kj9S0p"},"source":["add_numbers(1,2,3,4,5,6,100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b7d9bbvaDEqV"},"source":["# Lambda functions (a.k.a. anonymous functions) are a quick way of \n","# writing simple functions that have a single statement, which is the return value\n","# They are called anonymous, because unlike standard functions, they don't have a\n","# name\n","\n","double_this = lambda x: x * 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zx_KI344DtGy"},"source":["double_this(15)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9wQgQOHRY9rC"},"source":["# Numpy\n","\n","Numpy is a Python **library** focused on mathematical/scientific computing.\n","\n","*What is a Python library?*\n","\n","In simple terms, a **library** can be thought of as a collection of pre-written code that is usually centered around some common theme/function.  We can leverage this code, which has usually been thoroughly reviewed/maintained, in our own code so that we don't have to reinvent the wheel to perform common tasks.\n","\n","*What does numpy do?*\n","\n","Numpy provides a framework for n-dimensional arrays and mathematical functions to operate on these arrays.  This is broadly applicable to many fields, but is also especially useful in data analysis.  In fact, the core data analysis library that we will be using in this class **Pandas** is built off of the Numpy library.\n","\n","Let's learn some of the basic features of Numpy."]},{"cell_type":"markdown","metadata":{"id":"xJhapaWqcjD0"},"source":["Whenever we want to use code from a library, we need to **import** that library."]},{"cell_type":"code","metadata":{"id":"KUgN9DAyrxSc"},"source":["import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8I18jEe4cwIv"},"source":["The core data structure provided by numpy is the **array**.  An **array** is similar to the **list** that comes natively with Python, but there are a few key differences.\n","\n","*   More efficient calculations\n","*   Comes with plethora of built-in mathematical operations on arrays\n","*   Homogenous (all elements of the array have to be the same data type)\n","\n"]},{"cell_type":"code","metadata":{"id":"JoC7Glv-cvEV"},"source":["student_ages = np.array([23, 26, 24, 24, 22, 31, 30, 27, 21, 22, 25, 25, 25, 34])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sBGalHUJ_FkD","executionInfo":{"status":"ok","timestamp":1630258631612,"user_tz":420,"elapsed":164,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"565b290b-d57a-4a52-bf02-e3219688779d"},"source":["print(student_ages)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[23 26 24 24 22 31 30 27 21 22 25 25 25 34]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zB6dzk6igaZJ"},"source":["Now that we have loaded the data into a Numpy array, we can easily obtain common descriptive statistics using built-in methods."]},{"cell_type":"markdown","metadata":{"id":"Af10wT7-g6_z"},"source":["Average (Mean) age"]},{"cell_type":"code","metadata":{"id":"bTqH8b3pgZN-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630258666319,"user_tz":420,"elapsed":173,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"7b3b8512-835b-4e96-a752-3b1e22fb1da9"},"source":["np.mean(student_ages)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["25.642857142857142"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","metadata":{"id":"cCAU2tDChDT6"},"source":["Maximum age"]},{"cell_type":"code","metadata":{"id":"C5feR-AlhBuY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630258689048,"user_tz":420,"elapsed":164,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"de5b1978-0481-4574-e8c1-1eade0278508"},"source":["np.max(student_ages)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["34"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"QIHWiPdmhPgN"},"source":["Minimum age"]},{"cell_type":"code","metadata":{"id":"mQdrzgpChNA-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630258697227,"user_tz":420,"elapsed":202,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"7c895880-8d4b-4cad-dfb4-278c2edb7538"},"source":["np.min(student_ages)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["21"]},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"HTDQ9qqGiBr1"},"source":["Median age"]},{"cell_type":"code","metadata":{"id":"qne9cPz5hYk7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630258701773,"user_tz":420,"elapsed":154,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"d25859b4-f8d4-431d-b571-dcf5c357d78a"},"source":["np.median(student_ages)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["25.0"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"pSN5mDSIEfbL"},"source":["## Element-wise arithmetic on arrays\n","\n"]},{"cell_type":"code","metadata":{"id":"o4MjcRSoEGe0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630259005136,"user_tz":420,"elapsed":176,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"01cbbf59-0d75-459d-b521-62c7ce3b5236"},"source":["a = np.array([10,9,8])\n","b = np.array([2,2,1])\n","subtract = a - b\n","add = a + b\n","multiply = a * b\n","divide = a / b\n","print(subtract)\n","print(add)\n","print(multiply)\n","print(divide)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[8 7 7]\n","[12 11  9]\n","[20 18  8]\n","[5.  4.5 8. ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eY13lr7RDAtp"},"source":["# 2-Dimensional Arrays\n","\n","One key feature of **Numpy** is its ability to work with n-dimensional arrays.  Let's work with a 2 dimensional array in the following example.  "]},{"cell_type":"code","metadata":{"id":"Bd1k2jPXEGF0"},"source":["array_2d = np.array(\n","    [\n","     [1,2,3],\n","     [4,5,6],\n","     [7,8,9]\n","    ]\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jo3Mn3vWEOkd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630259169310,"user_tz":420,"elapsed":156,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"90dd15bb-ba06-4db3-a7ef-10ade7b2b5c3"},"source":["np.sum(array_2d)  # This will sum all elements in the 2d array:  1+2+3+4+5+6+7+8+9"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","metadata":{"id":"Fx9btrUmEuCs"},"source":["Use the `axis` argument to specify column or row specific calculations\n","\n","`axis = 0` is a column aggregation\n","\n","`axis = 1` is a row aggregation"]},{"cell_type":"code","metadata":{"id":"gZNVeyrSEmpW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630259222814,"user_tz":420,"elapsed":172,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"70a5ee20-bdca-499f-92c4-b07631a1db7d"},"source":["np.sum(array_2d, axis=0) # This will sum all elements for each column: [1+4+7, 2+5+8, 3+6+9]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([12, 15, 18])"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"x9tk17wEFLcR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630259250393,"user_tz":420,"elapsed":200,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"1e4a6c88-9705-4572-d220-db9e3be83fbb"},"source":["np.sum(array_2d, axis=1) # This will sum all elements for each row: [1+2+3, 4+5+6, 7+8+9]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 6, 15, 24])"]},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","metadata":{"id":"NTQZeu96yjoQ"},"source":["## Indexing and Slicing\n","\n","There are many situations where you would want to index (grab specific element(s) or subsets) from your numpy array.  Let's cover the different ways we can do this."]},{"cell_type":"code","metadata":{"id":"OgFXNGqI4QKR"},"source":["one_to_ten = np.arange(10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tQcf7G0FBvvL","executionInfo":{"status":"ok","timestamp":1630259321132,"user_tz":420,"elapsed":167,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"fa953dc1-fba4-40ae-bc8a-d8c85f011474"},"source":["print(one_to_ten)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0 1 2 3 4 5 6 7 8 9]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u6Yszv0x4vXN","executionInfo":{"status":"ok","timestamp":1630259388770,"user_tz":420,"elapsed":166,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"6059ebed-7ed0-437d-b6f1-278df7ae8944"},"source":["# Pick an element at a specific index\n","one_to_ten[9]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bkjBy0vh4-x8","executionInfo":{"status":"ok","timestamp":1630259415660,"user_tz":420,"elapsed":162,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"83982db0-272a-4267-9c02-3cb4cea72288"},"source":["# Pick a slice of the array\n","one_to_ten[3:7]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 4, 5, 6])"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CQTGQ0Tm5R67","executionInfo":{"status":"ok","timestamp":1630259463744,"user_tz":420,"elapsed":180,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"137cfedd-6993-4dd7-ab62-5bd3ef1a52f0"},"source":["# Beware that slices are views, and not copies of the original array\n","two_to_four = one_to_ten[2:5]\n","print(two_to_four)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2 3 4]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"du83KyMt5taK"},"source":["# Add 1 to each element of the slice\n","two_to_four += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xJQPytzr5uJx","executionInfo":{"status":"ok","timestamp":1630259481167,"user_tz":420,"elapsed":152,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"3012ac31-bc20-4dc8-d56e-bc95a28c1b01"},"source":["# 2 to 4 has now become 3 to 5\n","two_to_four"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 4, 5])"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9e_LUM3f5xtZ","executionInfo":{"status":"ok","timestamp":1630259502712,"user_tz":420,"elapsed":157,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"dfd96f1c-4013-4750-8c2c-1cfe3e803c6d"},"source":["# It has changed in the original array also!\n","one_to_ten"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 3, 4, 5, 5, 6, 7, 8, 9])"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"3st3jefN5zZa"},"source":["# If you want a copy and not a view, you will need to specifically copy the array/slice\n","two_to_four = one_to_ten[2:5].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l7HcDilLCo5q"},"source":["two_to_four *= 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TnsXYv4QCrfx","executionInfo":{"status":"ok","timestamp":1630259573603,"user_tz":420,"elapsed":161,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"1026d045-2e09-4d1f-e873-559390e8daf5"},"source":["print(one_to_ten)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0 1 3 4 5 5 6 7 8 9]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FO-KUArg7Wu_"},"source":["We can index and slice multidimensional arrays as well"]},{"cell_type":"code","metadata":{"id":"xpn__Ch86Zhh"},"source":["array_2d = np.array(\n","    [\n","     [1,2,3],\n","     [4,5,6],\n","     [7,8,9]\n","    ]\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nmqHaq7K79Q8","executionInfo":{"status":"ok","timestamp":1630259636555,"user_tz":420,"elapsed":165,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"08aaffce-8d77-464e-9231-01bef0ee6049"},"source":["# Element in the first row position (row index 0) and first column position (column index 0)\n","array_2d[0,0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kXcQi9c47_7z","executionInfo":{"status":"ok","timestamp":1630259660334,"user_tz":420,"elapsed":161,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"70cd5fdc-ff14-4aa2-b378-ac13a0ecef3f"},"source":["# Element in the second row position (row index 1) and third column position (column index 2)\n","array_2d[1,2]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XKZebiF29AK5","executionInfo":{"status":"ok","timestamp":1630259712199,"user_tz":420,"elapsed":162,"user":{"displayName":"Kenneth Simonds","photoUrl":"","userId":"13793884203152248977"}},"outputId":"e48703b8-fc06-4e23-b712-f7664bfb37d5"},"source":["# Elements in the second and third rows at the second column position\n","array_2d[1:3,1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5, 8])"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"TcQ7VifF9MTJ"},"source":[""],"execution_count":null,"outputs":[]}]}